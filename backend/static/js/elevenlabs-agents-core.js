// ============= –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï =============
let currentAgentId = null;
let isLoading = false;
let availableVoices = [];
let currentAgentData = null;

// ‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
let knowledgeBase = {
  files: [],
  urls: [],
  texts: [],
  totalSize: 0,
  totalChars: 0
};

let dynamicVariables = [];
let serverTools = [];
let clientTools = [];
let systemTools = {
  endCall: false,
  agentTransfer: false,
  humanHandoff: false,
  languageDetection: false
};

// ‚úÖ –£–õ–£–ß–®–ï–ù–ù–´–ô CONVERSATION MANAGER –° –î–ò–ê–ì–ù–û–°–¢–ò–ö–û–ô
let conversationManager = null;

// ============= ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô API MANAGEMENT =============

const api = {
  baseUrl: '/api/elevenlabs',
  
  getToken() {
    return localStorage.getItem('auth_token');
  },
  
  isAuthenticated() {
    return this.getToken() !== null;
  },
  
  async fetch(endpoint, options = {}) {
    // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    if (this.isAuthenticated()) {
      options.headers = {
        ...options.headers,
        'Authorization': `Bearer ${this.getToken()}`
      };
    }
    
    if (options.body && typeof options.body !== 'string' && !(options.body instanceof FormData)) {
      options.headers = {
        ...options.headers,
        'Content-Type': 'application/json'
      };
      options.body = JSON.stringify(options.body);
    }
    
    const response = await fetch(`${this.baseUrl}${endpoint}`, options);
    
    // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ 401
    if (response.status === 401) {
      localStorage.removeItem('auth_token');
      window.location.href = '/static/login.html';
      throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
    }
    
    const data = await response.json();
    
    if (!response.ok) {
      throw new Error(data.detail || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
    
    return data;
  },
  
  get(endpoint) {
    return this.fetch(endpoint, { method: 'GET' });
  },
  
  post(endpoint, data) {
    return this.fetch(endpoint, { method: 'POST', body: data });
  },
  
  put(endpoint, data) {
    return this.fetch(endpoint, { method: 'PUT', body: data });
  },
  
  delete(endpoint) {
    return this.fetch(endpoint, { method: 'DELETE' });
  },
  
  // ‚úÖ –ù–û–í–´–ô –º–µ—Ç–æ–¥ –¥–ª—è multipart form data (—Ñ–∞–π–ª—ã)
  async postFormData(endpoint, formData) {
    const options = {
      method: 'POST',
      body: formData
    };
    
    if (this.isAuthenticated()) {
      options.headers = {
        'Authorization': `Bearer ${this.getToken()}`
      };
    }
    
    const response = await fetch(`${this.baseUrl}${endpoint}`, options);
    
    if (response.status === 401) {
      localStorage.removeItem('auth_token');
      window.location.href = '/static/login.html';
      throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
    }
    
    const data = await response.json();
    
    if (!response.ok) {
      throw new Error(data.detail || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
    
    return data;
  }
};

// ============= UI UTILITIES =============

const ui = {
  showNotification(message, type = 'info') {
    const notification = document.getElementById('notification');
    const notificationMessage = document.getElementById('notification-message');
    
    notification.className = `notification notification-${type} show`;
    notificationMessage.textContent = message;
    notification.style.display = 'flex';
    
    setTimeout(() => {
      notification.classList.remove('show');
      setTimeout(() => {
        notification.style.display = 'none';
      }, 300);
    }, 5000);
  },
  
  showLoading() {
    const loadingOverlay = document.getElementById('loading-overlay');
    if (loadingOverlay) {
      loadingOverlay.style.display = 'flex';
    }
  },
  
  hideLoading() {
    const loadingOverlay = document.getElementById('loading-overlay');
    if (loadingOverlay) {
      loadingOverlay.style.display = 'none';
    }
  },
  
  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è setFormData —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –º–∞–ø–ø–∏–Ω–≥–æ–º –ø–æ–ª–µ–π
  setFormData(form, data) {
    console.log('üîç –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–∞–Ω–Ω—ã–º–∏:', data);
    
    // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ô –º–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π API -> HTML —ç–ª–µ–º–µ–Ω—Ç—ã
    const fieldMapping = {
      // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
      'name': 'agent-name',
      'language': 'agent-language', 
      'first_message': 'first-message',
      'system_prompt': 'system-prompt',
      'voice_id': 'voice_id', // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ —Ä–∞–¥–∏–æ –∫–Ω–æ–ø–∫–∏
      
      // LLM –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      'llm_model': 'llm-model',
      'llm_temperature': 'llm-temperature',
      'llm_max_tokens': 'llm-max-tokens',
      
      // TTS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      'tts_stability': 'tts-stability',
      'tts_similarity_boost': 'tts-similarity',
      'tts_speaker_boost': 'tts-speaker-boost'
    };
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
    Object.keys(fieldMapping).forEach(apiField => {
      const htmlFieldId = fieldMapping[apiField];
      const element = form.querySelector(`#${htmlFieldId}`);
      const value = data[apiField];
      
      console.log(`üìù –ü–æ–ª–µ ${apiField} -> #${htmlFieldId}:`, value);
      
      if (element && value !== undefined && value !== null) {
        if (element.type === 'checkbox') {
          element.checked = Boolean(value);
          console.log(`‚úÖ Checkbox ${htmlFieldId} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:`, element.checked);
        } else if (element.type === 'radio') {
          const radio = form.querySelector(`[name="${element.name}"][value="${value}"]`);
          if (radio) {
            radio.checked = true;
            console.log(`‚úÖ Radio ${htmlFieldId} –≤—ã–±—Ä–∞–Ω:`, value);
          }
        } else {
          element.value = value;
          console.log(`‚úÖ Input ${htmlFieldId} –∑–∞–ø–æ–ª–Ω–µ–Ω:`, element.value);
        }
      } else if (!element) {
        console.warn(`‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç #${htmlFieldId} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—è ${apiField}`);
      }
    });
    
    // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π —Å–ª–∞–π–¥–µ—Ä–æ–≤
    this.updateSliderDisplays(data);
    
    console.log('‚úÖ –§–æ—Ä–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –¥–∞–Ω–Ω—ã–º–∏');
  },
  
  // ‚úÖ –ù–û–í–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ª–∞–π–¥–µ—Ä–æ–≤
  updateSliderDisplays(data) {
    const sliderMappings = [
      { value: data.llm_temperature || 0.7, displayId: 'temperature-value', sliderId: 'llm-temperature' },
      { value: data.llm_max_tokens || 150, displayId: 'max-tokens-value', sliderId: 'llm-max-tokens' },
      { value: data.tts_stability || 0.5, displayId: 'stability-value', sliderId: 'tts-stability' },
      { value: data.tts_similarity_boost || 0.5, displayId: 'similarity-value', sliderId: 'tts-similarity' }
    ];
    
    sliderMappings.forEach(mapping => {
      const displayElement = document.getElementById(mapping.displayId);
      const sliderElement = document.getElementById(mapping.sliderId);
      
      if (displayElement) {
        displayElement.textContent = mapping.value;
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∞–π–¥–µ—Ä–∞ ${mapping.displayId}:`, mapping.value);
      }
      
      if (sliderElement) {
        sliderElement.value = mapping.value;
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–∞–π–¥–µ—Ä–∞ ${mapping.sliderId}:`, mapping.value);
      }
    });
  },
  
  getFormData(form) {
    const data = {};
    const formData = new FormData(form);
    
    for (const [key, value] of formData.entries()) {
      data[key] = value;
    }
    
    form.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {
      data[checkbox.name || checkbox.id] = checkbox.checked;
    });
    
    return data;
  }
};

// ============= ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò =============

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ê —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–∞ - –ü–†–ê–í–ò–õ–¨–ù–´–ô ENDPOINT
async function checkApiKey() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞ ElevenLabs...');
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint –∏–∑ –±—ç–∫–µ–Ω–¥–∞
    const response = await api.get('/api-key/status');
    console.log('üìä –°—Ç–∞—Ç—É—Å API –∫–ª—é—á–∞:', response);
    
    if (response.has_api_key && response.is_valid) {
      console.log('‚úÖ API –∫–ª—é—á –≤–∞–ª–∏–¥–µ–Ω');
      document.getElementById('api-key-container').style.display = 'none';
      document.getElementById('agents-list-container').style.display = 'block';
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–ª—é—á–∞
      await updateApiKeyDisplay();
      
      loadAgents();
      loadVoices();
      return true;
    } else if (response.has_api_key && !response.is_valid) {
      console.log('‚ùå API –∫–ª—é—á –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω');
      ui.showNotification('API –∫–ª—é—á ElevenLabs –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –û–±–Ω–æ–≤–∏—Ç–µ –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.', 'error');
      document.getElementById('api-key-container').style.display = 'block';
      document.getElementById('agents-list-container').style.display = 'none';
      return false;
    } else {
      console.log('‚ö†Ô∏è API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      document.getElementById('api-key-container').style.display = 'block';
      document.getElementById('agents-list-container').style.display = 'none';
      return false;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–∞:', error);
    ui.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API –∫–ª—é—á–∞: ' + error.message, 'error');
    document.getElementById('api-key-container').style.display = 'block';
    document.getElementById('agents-list-container').style.display = 'none';
    return false;
  }
}

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ê —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è API –∫–ª—é—á–∞
async function updateApiKeyDisplay() {
  try {
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint
    const response = await api.get('/api-key/status');
    const apiKeyDisplay = document.getElementById('api-key-display');
    if (apiKeyDisplay && response.has_api_key) {
      // –ú–∞—Å–∫–∏—Ä—É–µ–º –∫–ª—é—á –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      apiKeyDisplay.textContent = 'sk_...****';
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è API –∫–ª—é—á–∞:', error);
  }
}

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ê —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è API –∫–ª—é—á–∞
async function saveApiKey(apiKey) {
  try {
    ui.showLoading();
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint –∏ –¥–∞–Ω–Ω—ã–µ
    const response = await api.post('/api-key', { api_key: apiKey });
    
    if (response.success) {
      availableVoices = response.voices || [];
      ui.showNotification('API –∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!', 'success');
      await updateApiKeyDisplay();
      await loadAgents();
      
      // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤
      document.getElementById('api-key-container').style.display = 'none';
      document.getElementById('agents-list-container').style.display = 'block';
    } else {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å API –∫–ª—é—á');
    }
  } catch (error) {
    ui.showNotification(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ API –∫–ª—é—á–∞', 'error');
  } finally {
    ui.hideLoading();
  }
}

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ê —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è API –∫–ª—é—á–∞
async function removeApiKey() {
  if (!confirm('–£–¥–∞–ª–∏—Ç—å API –∫–ª—é—á? –≠—Ç–æ –æ—Ç–∫–ª—é—á–∏—Ç –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤.')) {
    return;
  }
  
  try {
    ui.showLoading();
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ - POST —Å –ø—É—Å—Ç—ã–º –∫–ª—é—á–æ–º
    await api.post('/api-key', { api_key: '' });
    ui.showNotification('API –∫–ª—é—á —É–¥–∞–ª–µ–Ω', 'success');
    await updateApiKeyDisplay();
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ñ–æ—Ä–º—É API –∫–ª—é—á–∞
    document.getElementById('api-key-container').style.display = 'block';
    document.getElementById('agents-list-container').style.display = 'none';
  } catch (error) {
    ui.showNotification(`–û—à–∏–±–∫–∞: ${error.message}`, 'error');
  } finally {
    ui.hideLoading();
  }
}

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ê —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ–ª–æ—Å–æ–≤
async function loadVoices() {
  try {
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint
    const voices = await api.get('/voices');
    availableVoices = voices || [];
    renderVoiceOptions();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ–ª–æ—Å–æ–≤:', error);
    ui.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ–ª–æ—Å–æ–≤', 'warning');
  }
}

function renderVoiceOptions() {
  const voiceOptions = document.getElementById('voice-options');
  if (!voiceOptions) return;
  
  voiceOptions.innerHTML = '';
  
  if (availableVoices.length === 0) {
    voiceOptions.innerHTML = '<p style="color: var(--text-gray);">–ì–æ–ª–æ—Å–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á.</p>';
    return;
  }
  
  availableVoices.forEach((voice, index) => {
    const voiceEl = document.createElement('label');
    voiceEl.className = 'voice-option';
    if (index === 0) voiceEl.classList.add('selected');
    
    voiceEl.innerHTML = `
      <input type="radio" name="voice" value="${voice.voice_id}" ${index === 0 ? 'checked' : ''}>
      <span>${voice.name}</span>
      ${voice.preview_url ? `<span class="voice-preview" data-url="${voice.preview_url}">‚ñ∂</span>` : ''}
    `;
    
    voiceOptions.appendChild(voiceEl);
  });
  
  document.querySelectorAll('.voice-option').forEach(option => {
    option.addEventListener('click', function() {
      document.querySelectorAll('.voice-option').forEach(opt => opt.classList.remove('selected'));
      this.classList.add('selected');
      this.querySelector('input').checked = true;
      
      const selectedVoiceName = this.querySelector('span').textContent;
      const selectedVoiceNameEl = document.getElementById('selected-voice-name');
      if (selectedVoiceNameEl) {
        selectedVoiceNameEl.textContent = selectedVoiceName;
      }
    });
  });
  
  document.querySelectorAll('.voice-preview').forEach(preview => {
    preview.addEventListener('click', function(e) {
      e.stopPropagation();
      const url = this.getAttribute('data-url');
      if (url) {
        const audio = new Audio(url);
        audio.play();
      }
    });
  });
}

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ê —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤
async function loadAgents() {
  try {
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint
    const agents = await api.get('/');
    renderAgentsList(agents || []);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤:', error);
    ui.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤', 'error');
  }
}

function renderAgentsList(agents) {
  const agentsList = document.getElementById('agents-list');
  if (!agentsList) return;
  
  agentsList.innerHTML = '';
  
  if (!agents || agents.length === 0) {
    agentsList.innerHTML = `
      <div class="empty-state">
        <div class="empty-icon">
          <i class="fas fa-robot"></i>
        </div>
        <h3 class="empty-title">–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤</h3>
        <p class="empty-description">
          –°–æ–∑–¥–∞–π—Ç–µ –≤–∞—à–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ ElevenLabs —Å –Ω–æ–≤—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏:<br>
          üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π ‚Ä¢ üéõÔ∏è –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è ‚Ä¢ üîß –í–Ω–µ—à–Ω–∏–µ API ‚Ä¢ ü§ñ –°–∏—Å—Ç–µ–º–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        </p>
        <button class="btn btn-primary" id="empty-create-agent-btn">
          <i class="fas fa-plus"></i> –°–æ–∑–¥–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
        </button>
      </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è
    const emptyCreateBtn = document.getElementById('empty-create-agent-btn');
    if (emptyCreateBtn) {
      emptyCreateBtn.addEventListener('click', () => editAgent('new'));
    }
    return;
  }
  
  agents.forEach(agent => {
    const agentEl = document.createElement('div');
    agentEl.className = 'agent-item';
    
    // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º ID –∞–≥–µ–Ω—Ç–∞
    const agentId = agent.elevenlabs_agent_id || agent.id;
    
    agentEl.innerHTML = `
      <div class="agent-icon">
        <i class="fas fa-microphone"></i>
      </div>
      <div class="agent-info">
        <h3 class="agent-name">${agent.name || 'Unnamed Agent'}</h3>
        <div class="agent-details">
          <div style="display: flex; align-items: center; gap: 0.5rem; margin-bottom: 0.25rem;">
            <i class="fas fa-check-circle" style="color: var(--success-color);"></i>
            <span>ID: ${agentId}</span>
          </div>
          <div style="display: flex; align-items: center; gap: 0.5rem; margin-bottom: 0.25rem;">
            <i class="fas fa-volume-up" style="color: var(--primary-blue);"></i>
            <span>–ì–æ–ª–æ—Å: ${agent.voice_id || '–ù–µ –≤—ã–±—Ä–∞–Ω'}</span>
          </div>
          <div style="display: flex; align-items: center; gap: 0.5rem; margin-bottom: 0.25rem;">
            <i class="fas fa-globe" style="color: var(--primary-blue);"></i>
            <span>–Ø–∑—ã–∫: ${getLanguageName(agent.language || 'en')}</span>
          </div>
          ${agent.llm_model ? `
          <div style="display: flex; align-items: center; gap: 0.5rem; margin-bottom: 0.25rem;">
            <i class="fas fa-brain" style="color: var(--primary-blue);"></i>
            <span>–ú–æ–¥–µ–ª—å: ${agent.llm_model}</span>
          </div>
          ` : ''}
          ${agent.first_message ? `
          <div style="display: flex; align-items: flex-start; gap: 0.5rem; margin-top: 0.5rem; padding-top: 0.5rem; border-top: 1px solid var(--border-color);">
            <i class="fas fa-comment-dots" style="color: var(--text-light); margin-top: 0.1rem;"></i>
            <div style="flex: 1;">
              <div style="font-size: 0.75rem; color: var(--text-light); text-transform: uppercase; margin-bottom: 0.25rem;">–ü–µ—Ä–≤–∞—è —Ñ—Ä–∞–∑–∞:</div>
              <div style="font-style: italic; color: var(--text-gray); line-height: 1.3;">"${agent.first_message.length > 80 ? agent.first_message.substring(0, 80) + '...' : agent.first_message}"</div>
            </div>
          </div>
          ` : ''}
          
          <!-- ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –µ—Å–ª–∏ –µ—Å—Ç—å -->
          <div style="display: flex; gap: 0.5rem; margin-top: 0.75rem; flex-wrap: wrap;">
            ${agent.knowledge_base_documents && agent.knowledge_base_documents.length > 0 ? `
            <span style="background: #dcfce7; color: #166534; padding: 0.25rem 0.5rem; border-radius: 0.25rem; font-size: 0.75rem;">
              üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π (${agent.knowledge_base_documents.length})
            </span>
            ` : ''}
            ${agent.dynamic_variables && agent.dynamic_variables.length > 0 ? `
            <span style="background: #dbeafe; color: #1e40af; padding: 0.25rem 0.5rem; border-radius: 0.25rem; font-size: 0.75rem;">
              üéõÔ∏è –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (${agent.dynamic_variables.length})
            </span>
            ` : ''}
            ${agent.server_tools && agent.server_tools.length > 0 ? `
            <span style="background: #fef3c7; color: #92400e; padding: 0.25rem 0.5rem; border-radius: 0.25rem; font-size: 0.75rem;">
              üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (${agent.server_tools.length})
            </span>
            ` : ''}
            ${agent.system_tools && Object.values(agent.system_tools).some(Boolean) ? `
            <span style="background: #f3e8ff; color: #7c2d12; padding: 0.25rem 0.5rem; border-radius: 0.25rem; font-size: 0.75rem;">
              ü§ñ –°–∏—Å—Ç–µ–º–Ω—ã–µ
            </span>
            ` : ''}
          </div>
        </div>
        <div class="agent-actions">
          <button class="btn btn-outline edit-agent" data-id="${agentId}">
            <i class="fas fa-edit"></i> –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
          </button>
        </div>
      </div>
    `;
    
    agentsList.appendChild(agentEl);
  });
  
  // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  document.querySelectorAll('.edit-agent').forEach(button => {
    button.addEventListener('click', function(e) {
      e.preventDefault();
      const agentId = this.getAttribute('data-id');
      console.log('üîç –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞ —Å ID:', agentId);
      editAgent(agentId);
    });
  });
}

function getLanguageName(code) {
  const languages = {
    'en': 'üá∫üá∏ English',
    'ru': 'üá∑üá∫ –†—É—Å—Å–∫–∏–π',
    'es': 'üá™üá∏ Espa√±ol',
    'fr': 'üá´üá∑ Fran√ßais',
    'de': 'üá©üá™ Deutsch',
    'it': 'üáÆüáπ Italiano',
    'pt': 'üáµüáπ Portugu√™s',
    'ja': 'üáØüáµ Êó•Êú¨Ë™û',
    'ko': 'üá∞üá∑ ÌïúÍµ≠Ïñ¥',
    'zh': 'üá®üá≥ ‰∏≠Êñá'
  };
  return languages[code] || code;
}

// ‚úÖ –ö–ê–†–î–ò–ù–ê–õ–¨–ù–û –ò–°–ü–†–ê–í–õ–ï–ù–ê —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞
async function editAgent(agentId) {
  try {
    console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞:', agentId);
    ui.showLoading();
    currentAgentId = agentId;
    
    if (agentId === 'new') {
      console.log('‚ú® –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞');
      // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
      currentAgentData = {
        name: '',
        language: 'ru',
        first_message: '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞? –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?',
        system_prompt: '–í—ã –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.',
        voice_id: availableVoices[0]?.voice_id || '',
        llm_model: 'gpt-4',
        llm_temperature: 0.7,
        llm_max_tokens: 150,
        tts_stability: 0.5,
        tts_similarity_boost: 0.5,
        tts_speaker_boost: true
      };
      
      // –°–±—Ä–æ—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      knowledgeBase = { files: [], urls: [], texts: [], totalSize: 0, totalChars: 0 };
      dynamicVariables = [];
      serverTools = [];
      clientTools = [];
      systemTools = { endCall: false, agentTransfer: false, humanHandoff: false, languageDetection: false };
      
      console.log('‚úÖ –ù–æ–≤—ã–π –∞–≥–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
      
    } else {
      console.log('üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞ –∏–∑ API:', agentId);
      
      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≥–µ–Ω—Ç–∞
      const agentData = await api.get(`/${agentId}`);
      console.log('üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç–∞ –æ—Ç API:', agentData);
      
      currentAgentData = agentData;
      
      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ—Ç–≤–µ—Ç–∞
      knowledgeBase = agentData.knowledge_base || { files: [], urls: [], texts: [], totalSize: 0, totalChars: 0 };
      dynamicVariables = agentData.dynamic_variables || [];
      serverTools = agentData.server_tools || [];
      clientTools = agentData.client_tools || [];
      systemTools = agentData.system_tools || { endCall: false, agentTransfer: false, humanHandoff: false, languageDetection: false };
      
      // ‚úÖ –ù–û–í–û–ï: –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
      if (agentData.knowledge_base_documents && agentData.knowledge_base_documents.length > 0 && 
          (!knowledgeBase.files.length && !knowledgeBase.urls.length && !knowledgeBase.texts.length)) {
        console.log('üìö –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π...');
        await loadKnowledgeBaseDetails(agentData.knowledge_base_documents);
      }
      
      console.log('‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', {
        knowledgeBase: knowledgeBase,
        dynamicVariables: dynamicVariables.length,
        serverTools: serverTools.length,
        clientTools: clientTools.length,
        systemTools: systemTools
      });
    }
    
    // ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –ü–û–°–õ–ï –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    console.log('üñäÔ∏è –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–∞–Ω–Ω—ã–º–∏ –∞–≥–µ–Ω—Ç–∞...');
    await fillAgentForm(currentAgentData);
    
    // ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    showEditForm();
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≥–µ–Ω—Ç–∞:', error);
    ui.showNotification(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≥–µ–Ω—Ç–∞: ${error.message}`, 'error');
  } finally {
    ui.hideLoading();
  }
}

// ‚úÖ –ù–û–í–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
async function loadKnowledgeBaseDetails(documentIds) {
  try {
    console.log('üìö –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:', documentIds);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const allDocuments = await api.get('/knowledge-base');
    
    if (allDocuments.success && allDocuments.documents) {
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
      const relevantDocs = allDocuments.documents.filter(doc => 
        documentIds.includes(doc.id)
      );
      
      console.log('üìä –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:', relevantDocs.length);
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ —Ç–∏–ø–∞–º
      relevantDocs.forEach(doc => {
        const docInfo = {
          document_id: doc.id,
          name: doc.name || `Document ${doc.id}`,
          chars: doc.character_count || 0,
          status: 'uploaded'
        };
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º
        if (doc.type === 'file' || doc.filename) {
          docInfo.filename = doc.filename || doc.name;
          docInfo.size = doc.size_in_bytes || 0;
          knowledgeBase.files.push(docInfo);
        } else if (doc.type === 'url' || doc.url) {
          docInfo.url = doc.url || '';
          docInfo.title = doc.name;
          knowledgeBase.urls.push(docInfo);
        } else {
          // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç
          docInfo.title = doc.name;
          docInfo.content = doc.content || '';
          knowledgeBase.texts.push(docInfo);
        }
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      updateKnowledgeBase();
      
      console.log('‚úÖ –î–µ—Ç–∞–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', {
        files: knowledgeBase.files.length,
        urls: knowledgeBase.urls.length,
        texts: knowledgeBase.texts.length
      });
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:', error);
    // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
  }
}

// ‚úÖ –ö–ê–†–î–ò–ù–ê–õ–¨–ù–û –ü–ï–†–ï–ü–ò–°–ê–ù–ê —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
async function fillAgentForm(agentData) {
  console.log('üñäÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–∞–Ω–Ω—ã–º–∏:', agentData);
  
  const agentForm = document.getElementById('agent-form');
  if (!agentForm) {
    console.error('‚ùå –§–æ—Ä–º–∞ –∞–≥–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
    return;
  }
  
  // ‚úÖ –ñ–î–ï–ú —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –≥–æ–ª–æ—Å–æ–≤ –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
  if (availableVoices.length === 0) {
    console.log('‚è≥ –ì–æ–ª–æ—Å–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –∑–∞–≥—Ä—É–∂–∞–µ–º...');
    await loadVoices();
  }
  
  // ‚úÖ –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É —á–µ—Ä–µ–∑ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
  ui.setFormData(agentForm, agentData);
  
  // ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –≥–æ–ª–æ—Å–∞
  console.log('üéµ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–æ–ª–æ—Å–∞:', agentData.voice_id);
  setSelectedVoice(agentData.voice_id);
  
  // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ–ª–æ—Å–∞
  updateSelectedVoiceName(agentData.voice_id);
  
  console.log('‚úÖ –§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞');
}

// ‚úÖ –ù–û–í–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ–ª–æ—Å–∞
function setSelectedVoice(voiceId) {
  if (!voiceId) {
    console.log('‚ö†Ô∏è Voice ID –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –≥–æ–ª–æ—Å');
    if (availableVoices.length > 0) {
      voiceId = availableVoices[0].voice_id;
    } else {
      console.warn('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤');
      return;
    }
  }
  
  const voiceOptions = document.getElementById('voice-options');
  if (!voiceOptions) {
    console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –≥–æ–ª–æ—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }
  
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –≤—ã–±–æ—Ä—ã
  document.querySelectorAll('.voice-option').forEach(option => {
    option.classList.remove('selected');
    const radio = option.querySelector('input[type="radio"]');
    if (radio) radio.checked = false;
  });
  
  // –ù–∞—Ö–æ–¥–∏–º –∏ –≤—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—ã–π –≥–æ–ª–æ—Å
  const targetVoiceRadio = voiceOptions.querySelector(`input[value="${voiceId}"]`);
  if (targetVoiceRadio) {
    targetVoiceRadio.checked = true;
    const voiceOption = targetVoiceRadio.closest('.voice-option');
    if (voiceOption) {
      voiceOption.classList.add('selected');
    }
    console.log('‚úÖ –ì–æ–ª–æ—Å –≤—ã–±—Ä–∞–Ω:', voiceId);
  } else {
    console.warn('‚ö†Ô∏è –ì–æ–ª–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö:', voiceId);
    // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–∞–∫ fallback
    const firstVoiceRadio = voiceOptions.querySelector('input[type="radio"]');
    if (firstVoiceRadio) {
      firstVoiceRadio.checked = true;
      firstVoiceRadio.closest('.voice-option')?.classList.add('selected');
      console.log('‚úÖ –í—ã–±—Ä–∞–Ω –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –≥–æ–ª–æ—Å –∫–∞–∫ fallback');
    }
  }
}

function updateSelectedVoiceName(voiceId) {
  const selectedVoiceNameEl = document.getElementById('selected-voice-name');
  if (selectedVoiceNameEl) {
    const voice = availableVoices.find(v => v.voice_id === voiceId);
    selectedVoiceNameEl.textContent = voice ? voice.name : '-';
    console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ–ª–æ—Å–∞:', voice?.name || '–Ω–µ –Ω–∞–π–¥–µ–Ω');
  }
}

function showEditForm() {
  console.log('üì± –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
  
  document.getElementById('agents-list-container').style.display = 'none';
  document.getElementById('edit-agent-container').style.display = 'block';
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Ö–µ–¥–µ—Ä–µ
  if (currentAgentId !== 'new') {
    document.getElementById('delete-agent').style.display = 'inline-flex';
    document.getElementById('view-embed-code').style.display = 'inline-flex';
  }
  document.getElementById('save-agent').style.display = 'inline-flex';
  
  console.log('‚úÖ –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑–∞–Ω–∞');
}

function hideEditForm() {
  document.getElementById('agents-list-container').style.display = 'block';
  document.getElementById('edit-agent-container').style.display = 'none';
  
  // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Ö–µ–¥–µ—Ä–µ
  document.getElementById('delete-agent').style.display = 'none';
  document.getElementById('view-embed-code').style.display = 'none';
  document.getElementById('save-agent').style.display = 'none';
  
  currentAgentId = null;
  currentAgentData = null;
}

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞
async function saveAgent() {
  try {
    ui.showLoading();
    
    const agentForm = document.getElementById('agent-form');
    const formData = ui.getFormData(agentForm);
    
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ ID –ø–æ–ª–µ–π
    const agentName = document.getElementById('agent-name')?.value?.trim();
    const systemPrompt = document.getElementById('system-prompt')?.value?.trim();
    
    if (!agentName) {
      ui.showNotification('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞', 'error');
      return;
    }
    
    if (!systemPrompt) {
      ui.showNotification('–í–≤–µ–¥–∏—Ç–µ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç', 'error');
      return;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–ª–æ—Å
    const selectedVoice = document.querySelector('input[name="voice"]:checked');
    if (!selectedVoice || !selectedVoice.value) {
      ui.showNotification('–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å –¥–ª—è –∞–≥–µ–Ω—Ç–∞', 'error');
      return;
    }
    
    // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û–ï —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–∞
    const agentData = {
      // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∏–∑ —Ñ–æ—Ä–º—ã
      name: agentName,
      language: document.getElementById('agent-language')?.value || 'ru',
      first_message: document.getElementById('first-message')?.value?.trim() || '',
      system_prompt: systemPrompt,
      voice_id: selectedVoice.value,
      
      // LLM –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      llm_model: document.getElementById('llm-model')?.value || 'gpt-4',
      llm_temperature: parseFloat(document.getElementById('llm-temperature')?.value || 0.7),
      llm_max_tokens: parseInt(document.getElementById('llm-max-tokens')?.value || 150),
      
      // TTS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      tts_stability: parseFloat(document.getElementById('tts-stability')?.value || 0.5),
      tts_similarity_boost: parseFloat(document.getElementById('tts-similarity')?.value || 0.5),
      tts_speaker_boost: document.getElementById('tts-speaker-boost')?.checked || true,
      
      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ Knowledge Base
      knowledge_base_documents: [],
      knowledge_base: window.knowledgeBase,
      
      // ‚úÖ –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ dynamic variables
      dynamic_variables: (window.dynamicVariables || []).filter(v => 
        v && v.name && v.name.trim() && v.value && v.value.trim()
      ),
      
      // ‚úÖ –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ server tools
      server_tools: (window.serverTools || []).filter(t => 
        t && t.name && t.name.trim() && t.url && t.url.trim()
      ),
      
      // ‚úÖ –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ client tools
      client_tools: (window.clientTools || []).filter(t => 
        t && t.name && t.name.trim() && t.description && t.description.trim()
      ),
      
      // ‚úÖ System tools
      system_tools: window.systemTools || {}
    };
    
    // –°–æ–±–∏—Ä–∞–µ–º ID –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ Knowledge Base
    if (window.knowledgeBase) {
      const knowledgeBaseDocIds = [];
      
      // –î–æ–±–∞–≤–ª—è–µ–º ID –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–æ–≤
      window.knowledgeBase.files.forEach(file => {
        if (file.document_id) {
          knowledgeBaseDocIds.push(file.document_id);
        }
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º ID –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ URL
      window.knowledgeBase.urls.forEach(url => {
        if (url.document_id) {
          knowledgeBaseDocIds.push(url.document_id);
        }
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º ID –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤
      window.knowledgeBase.texts.forEach(text => {
        if (text.document_id) {
          knowledgeBaseDocIds.push(text.document_id);
        }
      });
      
      agentData.knowledge_base_documents = knowledgeBaseDocIds;
    }
    
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç–∞:', {
      name: agentData.name,
      voice_id: agentData.voice_id,
      llm_model: agentData.llm_model,
      knowledge_base_documents: agentData.knowledge_base_documents.length,
      dynamic_variables: agentData.dynamic_variables.length,
      server_tools: agentData.server_tools.length,
      client_tools: agentData.client_tools.length,
      system_tools: Object.keys(agentData.system_tools).length
    });
    
    let result;
    if (currentAgentId === 'new') {
      // ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
      result = await api.post('/', agentData);
      currentAgentId = result.elevenlabs_agent_id || result.id;
      ui.showNotification('–ê–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!', 'success');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Ö–µ–¥–µ—Ä–µ
      document.getElementById('delete-agent').style.display = 'inline-flex';
      document.getElementById('view-embed-code').style.display = 'inline-flex';
      
    } else {
      // ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞
      result = await api.put(`/${currentAgentId}`, agentData);
      ui.showNotification('–ê–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!', 'success');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç–∞
    currentAgentData = result;
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º embed –∫–æ–¥ –µ—Å–ª–∏ –∞–≥–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω
    if (currentAgentId && currentAgentId !== 'new') {
      try {
        const embedData = await api.get(`/${currentAgentId}/embed`);
        const embedCodeEl = document.getElementById('embed-code');
        if (embedCodeEl) {
          embedCodeEl.textContent = embedData.embed_code;
        }
      } catch (error) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å embed –∫–æ–¥:', error);
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞:', error);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    let errorMessage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–≥–µ–Ω—Ç–∞';
    
    if (error.message) {
      if (error.message.includes('Voice ID')) {
        errorMessage = '–ü—Ä–æ–±–ª–µ–º–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≥–æ–ª–æ—Å–æ–º. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ–ª–æ—Å.';
      } else if (error.message.includes('prompt')) {
        errorMessage = '–ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ.';
      } else if (error.message.includes('knowledge')) {
        errorMessage = '–ü—Ä–æ–±–ª–µ–º–∞ —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã.';
      } else if (error.message.includes('tool')) {
        errorMessage = '–ü—Ä–æ–±–ª–µ–º–∞ —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ tools.';
      } else {
        errorMessage = error.message;
      }
    }
    
    ui.showNotification(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${errorMessage}`, 'error');
    
  } finally {
    ui.hideLoading();
  }
}

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ê —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞
async function deleteAgent() {
  if (!currentAgentId || currentAgentId === 'new') return;
  
  if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –∞–≥–µ–Ω—Ç–∞? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
    return;
  }
  
  try {
    ui.showLoading();
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    await api.delete(`/${currentAgentId}`);
    ui.showNotification('–ê–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!', 'success');
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∞–≥–µ–Ω—Ç–æ–≤
    await loadAgents();
    hideEditForm();
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞:', error);
    ui.showNotification(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${error.message}`, 'error');
  } finally {
    ui.hideLoading();
  }
}

function testAgent(agentId) {
  editAgent(agentId);
  // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ç–∞–± —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  switchToTab('testing');
}

function showEmbedCode(agentId) {
  editAgent(agentId);
  // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ç–∞–± –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è
  switchToTab('embed');
}

function switchToTab(tabName) {
  const tabs = document.querySelectorAll('.tab');
  const tabContents = document.querySelectorAll('.tab-content');
  
  tabs.forEach(tab => {
    tab.classList.remove('active');
    if (tab.dataset.tab === tabName) {
      tab.classList.add('active');
    }
  });
  
  tabContents.forEach(content => {
    content.classList.remove('active');
    if (content.id === `${tabName}-tab`) {
      content.classList.add('active');
    }
  });
  
  if (tabName === 'embed') {
    generateEmbedCode();
  }
}

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ê —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ embed –∫–æ–¥–∞
async function generateEmbedCode() {
  if (!currentAgentId || currentAgentId === 'new') {
    const embedCodeEl = document.getElementById('embed-code');
    if (embedCodeEl) {
      embedCodeEl.textContent = '–°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è';
    }
    return;
  }
  
  try {
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint –¥–ª—è embed –∫–æ–¥–∞
    const embedData = await api.get(`/${currentAgentId}/embed`);
    const embedCodeEl = document.getElementById('embed-code');
    if (embedCodeEl) {
      embedCodeEl.textContent = embedData.embed_code;
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è embed –∫–æ–¥–∞:', error);
    const embedCodeEl = document.getElementById('embed-code');
    if (embedCodeEl) {
      embedCodeEl.textContent = `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞: ${error.message}`;
    }
  }
}

// ============= ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø KNOWLEDGE BASE =============

// ‚úÖ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
async function handleFileUpload(files) {
  console.log('üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤:', files.length);
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
  ui.showLoading();
  
  let successCount = 0;
  let errorCount = 0;
  
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    for (const file of files) {
      try {
        // ‚úÖ –†–ï–ê–õ–¨–ù–ê–Ø –∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ API
        const formData = new FormData();
        formData.append('file', file);
        formData.append('name', file.name);
        
        const response = await api.postFormData('/knowledge-base/file', formData);
        
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ü–û–°–õ–ï —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        const fileData = {
          name: response.name || file.name,
          filename: file.name,
          size: file.size,
          chars: response.chars || Math.round(file.size * 0.8),
          status: 'uploaded',
          document_id: response.document_id
        };
        
        window.knowledgeBase.files.push(fileData);
        successCount++;
        
        console.log(`‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω: ${response.document_id}`);
        
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', error);
        errorCount++;
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º UI –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∑–æ–∫
    window.updateKnowledgeBase();
    
    if (window.renderKnowledgeFiles) {
      window.renderKnowledgeFiles();
    }
    if (window.updateKnowledgeStats) {
      window.updateKnowledgeStats();
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (successCount > 0 && errorCount === 0) {
      ui.showNotification(`–í—Å–µ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã (${successCount})!`, 'success');
    } else if (successCount > 0 && errorCount > 0) {
      ui.showNotification(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${successCount} —Ñ–∞–π–ª–æ–≤, –æ—à–∏–±–æ–∫: ${errorCount}`, 'warning');
    } else {
      ui.showNotification(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã`, 'error');
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
    ui.showNotification(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}`, 'error');
  } finally {
    ui.hideLoading();
  }
}

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è: –†–µ–∞–ª—å–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ URL —á–µ—Ä–µ–∑ API
async function handleUrlAdd(url) {
  console.log('üåê –î–æ–±–∞–≤–ª–µ–Ω–∏–µ URL:', url);
  
  try {
    ui.showLoading();
    
    // ‚úÖ –†–ï–ê–õ–¨–ù–û–ï –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API
    const response = await api.post('/knowledge-base/url', {
      url: url,
      name: `URL: ${url}`
    });
    
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—É—é KB —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const urlData = {
      url: url,
      title: response.name || `URL: ${url}`,
      document_id: response.document_id,
      chars: response.chars || 2000
    };
    
    window.knowledgeBase.urls.push(urlData);
    window.updateKnowledgeBase();
    
    // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
    const urlInput = document.getElementById('knowledge-url');
    if (urlInput) {
      urlInput.value = '';
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    if (window.renderKnowledgeUrls) {
      window.renderKnowledgeUrls();
    }
    if (window.updateKnowledgeStats) {
      window.updateKnowledgeStats();
    }
    
    console.log(`‚úÖ URL –¥–æ–±–∞–≤–ª–µ–Ω –∏ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω: ${response.document_id}`);
    ui.showNotification(`URL —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∏ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω! ID: ${response.document_id}`, 'success');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è URL:', error);
    ui.showNotification(`–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è URL: ${error.message}`, 'error');
  } finally {
    ui.hideLoading();
  }
}

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è: –†–µ–∞–ª—å–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ API
async function handleTextAdd(text) {
  console.log('‚úèÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞:', text.substring(0, 50) + '...');
  
  try {
    ui.showLoading();
    
    const textName = `–¢–µ–∫—Å—Ç ${window.knowledgeBase.texts.length + 1}`;
    
    // ‚úÖ –†–ï–ê–õ–¨–ù–û–ï –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API
    const response = await api.post('/knowledge-base/text', {
      text: text,
      name: textName
    });
    
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—É—é KB —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const textData = {
      title: response.name || textName,
      content: text,
      document_id: response.document_id,
      chars: response.chars || text.length
    };
    
    window.knowledgeBase.texts.push(textData);
    window.updateKnowledgeBase();
    
    // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
    const textInput = document.getElementById('knowledge-text');
    if (textInput) {
      textInput.value = '';
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    if (window.renderKnowledgeTexts) {
      window.renderKnowledgeTexts();
    }
    if (window.updateKnowledgeStats) {
      window.updateKnowledgeStats();
    }
    
    console.log(`‚úÖ –¢–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∏ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω: ${response.document_id}`);
    ui.showNotification(`–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∏ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω! ID: ${response.document_id}`, 'success');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞:', error);
    ui.showNotification(`–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: ${error.message}`, 'error');
  } finally {
    ui.hideLoading();
  }
}

// ============= –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø DYNAMIC VARIABLES =============

window.updateVariable = function(index, field, value) {
  if (!dynamicVariables[index]) {
    dynamicVariables[index] = {};
  }
  dynamicVariables[index][field] = value;
};

window.removeVariable = function(index) {
  dynamicVariables.splice(index, 1);
  if (window.renderDynamicVariables) {
    window.renderDynamicVariables();
  }
};

// ============= –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø KNOWLEDGE BASE =============

window.removeKnowledgeFile = function(index) {
  knowledgeBase.files.splice(index, 1);
  updateKnowledgeBase();
  if (window.renderKnowledgeFiles) {
    window.renderKnowledgeFiles();
  }
};

window.removeKnowledgeUrl = function(index) {
  knowledgeBase.urls.splice(index, 1);
  updateKnowledgeBase();
  if (window.renderKnowledgeUrls) {
    window.renderKnowledgeUrls();
  }
};

// ‚úÖ –ù–û–í–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è: –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ KB
window.removeKnowledgeText = function(index) {
  knowledgeBase.texts.splice(index, 1);
  updateKnowledgeBase();
  if (window.renderKnowledgeTexts) {
    window.renderKnowledgeTexts();
  }
};

function updateKnowledgeBase() {
  knowledgeBase.totalSize = knowledgeBase.files.reduce((sum, file) => sum + (file.size || 0), 0);
  knowledgeBase.totalChars = [...knowledgeBase.files, ...knowledgeBase.urls, ...knowledgeBase.texts]
    .reduce((sum, item) => sum + (item.chars || 0), 0);
}

// ============= –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø SERVER TOOLS =============

window.updateServerTool = function(index, field, value) {
  if (!serverTools[index]) {
    serverTools[index] = {};
  }
  serverTools[index][field] = value;
};

window.removeServerTool = function(index) {
  serverTools.splice(index, 1);
  if (window.renderServerTools) {
    window.renderServerTools();
  }
};

window.testServerTool = function(index) {
  const tool = serverTools[index];
  ui.showNotification(`–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${tool.name}: –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ ${tool.url}`, 'info');
  // TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
};

// ============= –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø CLIENT TOOLS =============

window.updateClientTool = function(index, field, value) {
  if (!clientTools[index]) {
    clientTools[index] = {};
  }
  clientTools[index][field] = value;
};

window.removeClientTool = function(index) {
  clientTools.splice(index, 1);
  if (window.renderClientTools) {
    window.renderClientTools();
  }
};

window.testClientTool = function(index) {
  const tool = clientTools[index];
  ui.showNotification(`–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–∏: ${tool.name}`, 'info');
  // TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
};

// ============= –≠–ö–°–ü–û–†–¢ –í –ì–õ–û–ë–ê–õ–¨–ù–£–Æ –û–ë–õ–ê–°–¢–¨ =============

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ window –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤
window.api = api;
window.ui = ui;
window.currentAgentId = currentAgentId;
window.currentAgentData = currentAgentData;
window.availableVoices = availableVoices;
window.knowledgeBase = knowledgeBase;
window.dynamicVariables = dynamicVariables;
window.serverTools = serverTools;
window.clientTools = clientTools;
window.systemTools = systemTools;
window.conversationManager = conversationManager;

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
window.checkApiKey = checkApiKey;
window.saveApiKey = saveApiKey;
window.removeApiKey = removeApiKey;
window.loadVoices = loadVoices;
window.loadAgents = loadAgents;
window.editAgent = editAgent;
window.saveAgent = saveAgent;
window.deleteAgent = deleteAgent;
window.testAgent = testAgent;
window.showEmbedCode = showEmbedCode;
window.switchToTab = switchToTab;
window.generateEmbedCode = generateEmbedCode;
window.updateKnowledgeBase = updateKnowledgeBase;
window.setSelectedVoice = setSelectedVoice;
window.loadKnowledgeBaseDetails = loadKnowledgeBaseDetails;

// ‚úÖ –ù–û–í–´–ï —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è Knowledge Base
window.handleFileUpload = handleFileUpload;
window.handleUrlAdd = handleUrlAdd;
window.handleTextAdd = handleTextAdd;
