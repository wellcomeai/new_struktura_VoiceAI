# backend/api/payments.py

"""
Payment API endpoints for WellcomeAI application.
Handles Robokassa payment integration.
–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø - –ø–æ–¥–¥–µ—Ä–∂–∫–∞ GET/POST –¥–ª—è –≤—Å–µ—Ö endpoints + —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ 1490 —Ä—É–±–ª–µ–π
"""

from fastapi import APIRouter, Depends, HTTPException, status, Request, Form, Body
from fastapi.responses import HTMLResponse, RedirectResponse
from sqlalchemy.orm import Session
from typing import Optional, Dict, Any
from datetime import datetime, timedelta, timezone

from backend.core.logging import get_logger
from backend.core.dependencies import get_current_user
from backend.core.config import settings
from backend.db.session import get_db
from backend.models.user import User
from backend.models.subscription import SubscriptionPlan, PaymentTransaction
from backend.services.payment_service import RobokassaService
from backend.services.subscription_service import SubscriptionService

logger = get_logger(__name__)

# ‚úÖ –§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò –ü–û–î–ü–ò–°–ö–ò
FIXED_SUBSCRIPTION_PRICE = 1490.0  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö
SUBSCRIPTION_DURATION_DAYS = 30     # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –¥–Ω—è—Ö
SUBSCRIPTION_PLAN_NAME = "–¢–∞—Ä–∏—Ñ –°—Ç–∞—Ä—Ç"
SUBSCRIPTION_DESCRIPTION = "–°—Ç–∞—Ä—Ç–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º"
MAX_ASSISTANTS = 3

# Create router
router = APIRouter()

@router.post("/create-payment", response_model=Dict[str, Any])
async def create_payment(
    plan_code: str = "start",
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ —Å –§–ò–ö–°–ò–†–û–í–ê–ù–ù–û–ô –¶–ï–ù–û–ô 1490 —Ä—É–±–ª–µ–π
    
    Args:
        plan_code: –ö–æ–¥ —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "start")
        current_user: –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
    Returns:
        –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –æ–ø–ª–∞—Ç—É
    """
    try:
        logger.info(f"üöÄ Creating payment for user {current_user.id}, plan {plan_code}")
        
        # –î–û–ë–ê–í–õ–ï–ù–û: –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        logger.info(f"üìã Payment settings (FIXED PRICE):")
        logger.info(f"   HOST_URL: {settings.HOST_URL}")
        logger.info(f"   ROBOKASSA_MERCHANT_LOGIN: {settings.ROBOKASSA_MERCHANT_LOGIN}")
        logger.info(f"   ROBOKASSA_TEST_MODE: {settings.ROBOKASSA_TEST_MODE}")
        logger.info(f"   FIXED_SUBSCRIPTION_PRICE: {FIXED_SUBSCRIPTION_PRICE} —Ä—É–±")
        
        # –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø–ª–∞—Ç–µ–∂–∞
        if not settings.ROBOKASSA_MERCHANT_LOGIN:
            logger.error("‚ùå ROBOKASSA_MERCHANT_LOGIN is not configured")
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail="Payment system not configured: missing merchant login. Contact administrator."
            )
            
        if not settings.ROBOKASSA_PASSWORD_1:
            logger.error("‚ùå ROBOKASSA_PASSWORD_1 is not configured")
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail="Payment system not configured: missing password. Contact administrator."
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        # –ú–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å —ç—Ç—É –ø—Ä–æ–≤–µ—Ä–∫—É, –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–æ–¥–ª–µ–Ω–∏–µ
        logger.info(f"üë§ User info: email={current_user.email}, is_trial={current_user.is_trial}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = db.query(User).filter(User.id == current_user.id).first()
        if not user:
            logger.error(f"‚ùå User {current_user.id} not found")
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="User not found"
            )
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω (—Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î, —Ü–µ–Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
        plan = db.query(SubscriptionPlan).filter(SubscriptionPlan.code == plan_code).first()
        if not plan:
            logger.info(f"üìã Creating subscription plan: {plan_code}")
            plan = SubscriptionPlan(
                code=plan_code,
                name=SUBSCRIPTION_PLAN_NAME,
                price=FIXED_SUBSCRIPTION_PRICE,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
                max_assistants=MAX_ASSISTANTS,
                description=SUBSCRIPTION_DESCRIPTION,
                is_active=True
            )
            db.add(plan)
            db.flush()
            logger.info(f"‚úÖ Created subscription plan: {plan_code}")
        
        # ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –§–ò–ö–°–ò–†–û–í–ê–ù–ù–£–Æ –¶–ï–ù–£ (–Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ë–î)
        out_sum = f"{FIXED_SUBSCRIPTION_PRICE:.2f}"  # –í—Å–µ–≥–¥–∞ 1490.00
        inv_id = f"{int(datetime.now().timestamp())}"
        description = f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {SUBSCRIPTION_DURATION_DAYS} –¥–Ω–µ–π –∑–∞ {FIXED_SUBSCRIPTION_PRICE:.0f} —Ä—É–±–ª–µ–π"
        
        logger.info(f"üí≥ PAYMENT PARAMETERS (FIXED PRICE):")
        logger.info(f"   out_sum: '{out_sum}' (FIXED: {FIXED_SUBSCRIPTION_PRICE} —Ä—É–±)")
        logger.info(f"   inv_id: '{inv_id}'")
        logger.info(f"   description: '{description}'")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        transaction = PaymentTransaction(
            user_id=user.id,
            plan_id=plan.id,
            external_payment_id=inv_id,
            payment_system="robokassa",
            amount=FIXED_SUBSCRIPTION_PRICE,  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞
            currency="RUB",
            status="pending",
            payment_details=f"Plan: {plan_code}, Fixed price: {FIXED_SUBSCRIPTION_PRICE}"
        )
        db.add(transaction)
        db.commit()
        db.refresh(transaction)
        
        logger.info(f"üìã Created payment transaction: {transaction.id}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        custom_params = None
        if not RobokassaService.DISABLE_SHP_PARAMS:
            custom_params = {
                "Shp_user_id": str(current_user.id),
                "Shp_plan_code": plan_code
            }
            logger.info(f"‚úÖ Using Shp_ parameters: {custom_params}")
        else:
            logger.info(f"üîß DIAGNOSTIC MODE: Shp_ parameters disabled")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
        logger.info(f"üîê Generating signature with PASSWORD_1...")
        signature = RobokassaService.generate_signature(
            RobokassaService.MERCHANT_LOGIN,
            out_sum,
            inv_id,
            RobokassaService.PASSWORD_1,
            custom_params
        )
        
        # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–æ—Ä–º—ã
        form_params = {
            "MerchantLogin": RobokassaService.MERCHANT_LOGIN,
            "OutSum": out_sum,
            "InvId": inv_id,
            "Description": description,
            "SignatureValue": signature,
            "Culture": "ru",
            "Encoding": "utf-8"
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º URL'—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤
        if RobokassaService.BASE_URL and not any(x in RobokassaService.BASE_URL for x in ["localhost", "127.0.0.1"]):
            form_params["ResultURL"] = RobokassaService.RESULT_URL
            form_params["SuccessURL"] = RobokassaService.SUCCESS_URL  
            form_params["FailURL"] = RobokassaService.FAIL_URL
            logger.info(f"‚úÖ Added callback URLs")
        else:
            logger.warning(f"‚ö†Ô∏è Skipping callback URLs due to localhost")
        
        # –î–æ–±–∞–≤–ª—è–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user.email:
            form_params["Email"] = user.email
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
        if RobokassaService.TEST_MODE:
            form_params["IsTest"] = "1"
            logger.info("üß™ Test mode enabled")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω—ã
        if custom_params and not RobokassaService.DISABLE_SHP_PARAMS:
            for key, value in custom_params.items():
                form_params[key] = value
        
        # ‚úÖ –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –§–ò–ù–ê–õ–¨–ù–´–• –ü–ê–†–ê–ú–ï–¢–†–û–í
        logger.info(f"üìã FINAL FORM PARAMETERS:")
        for key, value in form_params.items():
            if key == "SignatureValue":
                logger.info(f"   {key}: '{value}'")
            else:
                logger.info(f"   {key}: '{value}'")
        
        logger.info(f"‚úÖ Payment created with FIXED PRICE: {FIXED_SUBSCRIPTION_PRICE} rubles")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤ –±–∞–∑—É
        await SubscriptionService.log_subscription_event(
            db=db,
            user_id=str(current_user.id),
            action="payment_started",
            plan_id=str(plan.id),
            plan_code=plan_code,
            details=f"Payment initiated with fixed price: {FIXED_SUBSCRIPTION_PRICE} rubles, inv_id={inv_id}"
        )
        
        return {
            "payment_url": RobokassaService.PAYMENT_URL,
            "form_params": form_params,
            "inv_id": inv_id,
            "amount": out_sum,
            "transaction_id": str(transaction.id),
            "fixed_price": FIXED_SUBSCRIPTION_PRICE  # –î–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        }
        
    except HTTPException as he:
        logger.error(f"‚ùå HTTP Exception in create_payment: {he.detail}")
        raise
    except Exception as e:
        logger.error(f"‚ùå Unexpected error in create_payment: {str(e)}", exc_info=True)
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to create payment: {str(e)}"
        )

@router.post("/robokassa-result")
async def robokassa_result(
    request: Request,
    db: Session = Depends(get_db),
    OutSum: str = Form(...),
    InvId: str = Form(...),
    SignatureValue: str = Form(...),
    Shp_user_id: Optional[str] = Form(None),
    Shp_plan_code: Optional[str] = Form(None)
):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç Robokassa (ResultURL)
    
    –≠—Ç–æ—Ç endpoint –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è Robokassa –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
    """
    try:
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
        form_data = await request.form()
        form_dict = dict(form_data)
        
        logger.info(f"üì• Received Robokassa result notification:")
        logger.info(f"   OutSum: {OutSum}")
        logger.info(f"   InvId: {InvId}")
        logger.info(f"   SignatureValue: {SignatureValue[:10]}...")
        logger.info(f"   Shp_user_id: {Shp_user_id}")
        logger.info(f"   Shp_plan_code: {Shp_plan_code}")
        logger.info(f"   All form data: {form_dict}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–ª–∞—Ç–µ–∂–∞
        result = await RobokassaService.process_payment_result(db, form_dict)
        
        logger.info(f"‚úÖ Payment result processed: {result}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç Robokassa
        return HTMLResponse(content=result, status_code=200)
        
    except Exception as e:
        logger.error(f"‚ùå Error in robokassa_result endpoint: {str(e)}", exc_info=True)
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º FAIL
        return HTMLResponse(content="FAIL", status_code=200)

# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–∫ GET, —Ç–∞–∫ –∏ POST –¥–ª—è Success URL
@router.get("/success", response_class=HTMLResponse)
@router.post("/success", response_class=HTMLResponse)
async def payment_success(
    request: Request,
    OutSum: Optional[str] = None,
    InvId: Optional[str] = None,
    SignatureValue: Optional[str] = None
):
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã (SuccessURL)
    
    –°—é–¥–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ GET, —Ç–∞–∫ –∏ POST –∑–∞–ø—Ä–æ—Å—ã
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ GET –∏–ª–∏ POST
        if request.method == "POST":
            try:
                form_data = await request.form()
                OutSum = form_data.get("OutSum", OutSum)
                InvId = form_data.get("InvId", InvId)
                SignatureValue = form_data.get("SignatureValue", SignatureValue)
            except Exception as form_error:
                logger.warning(f"‚ö†Ô∏è Could not parse form data: {form_error}")
        
        logger.info(f"üéâ User redirected to success page:")
        logger.info(f"   Method: {request.method}")
        logger.info(f"   InvId: {InvId}")
        logger.info(f"   OutSum: {OutSum}")
        logger.info(f"   SignatureValue: {SignatureValue[:10] if SignatureValue else None}...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        status_data = RobokassaService.get_payment_status_message(success=True)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        html_content = f"""
        <!DOCTYPE html>
        <html lang="ru">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>{status_data['title']}</title>
            <style>
                body {{
                    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    margin: 0;
                    padding: 20px;
                    min-height: 100vh;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                }}
                .container {{
                    background: white;
                    border-radius: 20px;
                    padding: 40px;
                    max-width: 500px;
                    text-align: center;
                    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.1);
                }}
                .icon {{
                    font-size: 4rem;
                    color: #10b981;
                    margin-bottom: 20px;
                }}
                .title {{
                    font-size: 1.8rem;
                    font-weight: 600;
                    color: #1f2937;
                    margin-bottom: 10px;
                }}
                .message {{
                    color: #6b7280;
                    margin-bottom: 30px;
                    line-height: 1.6;
                }}
                .button {{
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    color: white;
                    padding: 12px 30px;
                    border: none;
                    border-radius: 10px;
                    font-weight: 500;
                    text-decoration: none;
                    display: inline-block;
                    transition: transform 0.2s;
                }}
                .button:hover {{
                    transform: translateY(-2px);
                }}
            </style>
        </head>
        <body>
            <div class="container">
                <div class="icon">‚úÖ</div>
                <h1 class="title">{status_data['title']}</h1>
                <p class="message">{status_data['message']}</p>
                <a href="{status_data['redirect_url']}?payment_result=success&payment_status=success" class="button">–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</a>
            </div>
            <script>
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
                setTimeout(() => {{
                    window.location.href = "{status_data['redirect_url']}?payment_result=success&payment_status=success";
                }}, 5000);
            </script>
        </body>
        </html>
        """
        
        return HTMLResponse(content=html_content)
        
    except Exception as e:
        logger.error(f"‚ùå Error in payment_success endpoint: {str(e)}", exc_info=True)
        return HTMLResponse(content="<h1>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</h1>", status_code=500)

# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–∫ GET, —Ç–∞–∫ –∏ POST –¥–ª—è Cancel URL
@router.get("/cancel", response_class=HTMLResponse)
@router.post("/cancel", response_class=HTMLResponse) 
async def payment_cancel(
    request: Request,
    OutSum: Optional[str] = None,
    InvId: Optional[str] = None
):
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–º–µ–Ω—ã –æ–ø–ª–∞—Ç—ã (FailURL)
    
    –°—é–¥–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∏–ª–∏ –Ω–µ—É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ GET, —Ç–∞–∫ –∏ POST –∑–∞–ø—Ä–æ—Å—ã
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ GET –∏–ª–∏ POST
        if request.method == "POST":
            try:
                form_data = await request.form()
                OutSum = form_data.get("OutSum", OutSum)
                InvId = form_data.get("InvId", InvId)
            except Exception as form_error:
                logger.warning(f"‚ö†Ô∏è Could not parse form data in cancel: {form_error}")
        
        logger.info(f"‚ùå User redirected to cancel page:")
        logger.info(f"   Method: {request.method}")
        logger.info(f"   InvId: {InvId}")
        logger.info(f"   OutSum: {OutSum}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        status_data = RobokassaService.get_payment_status_message(success=False)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        html_content = f"""
        <!DOCTYPE html>
        <html lang="ru">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>{status_data['title']}</title>
            <style>
                body {{
                    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                    background: linear-gradient(135deg, #ffeaa7 0%, #fab1a0 100%);
                    margin: 0;
                    padding: 20px;
                    min-height: 100vh;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                }}
                .container {{
                    background: white;
                    border-radius: 20px;
                    padding: 40px;
                    max-width: 500px;
                    text-align: center;
                    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.1);
                }}
                .icon {{
                    font-size: 4rem;
                    color: #f97316;
                    margin-bottom: 20px;
                }}
                .title {{
                    font-size: 1.8rem;
                    font-weight: 600;
                    color: #1f2937;
                    margin-bottom: 10px;
                }}
                .message {{
                    color: #6b7280;
                    margin-bottom: 30px;
                    line-height: 1.6;
                }}
                .button {{
                    background: linear-gradient(135deg, #f97316 0%, #ea580c 100%);
                    color: white;
                    padding: 12px 30px;
                    border: none;
                    border-radius: 10px;
                    font-weight: 500;
                    text-decoration: none;
                    display: inline-block;
                    transition: transform 0.2s;
                }}
                .button:hover {{
                    transform: translateY(-2px);
                }}
            </style>
        </head>
        <body>
            <div class="container">
                <div class="icon">‚ö†Ô∏è</div>
                <h1 class="title">{status_data['title']}</h1>
                <p class="message">{status_data['message']}</p>
                <a href="{status_data['redirect_url']}" class="button">–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</a>
            </div>
            <script>
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
                setTimeout(() => {{
                    window.location.href = "{status_data['redirect_url']}";
                }}, 10000);
            </script>
        </body>
        </html>
        """
        
        return HTMLResponse(content=html_content)
        
    except Exception as e:
        logger.error(f"‚ùå Error in payment_cancel endpoint: {str(e)}", exc_info=True)
        return HTMLResponse(content="<h1>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</h1>", status_code=500)

@router.get("/status/{user_id}")
async def get_payment_status(
    user_id: str,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞/–ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if str(current_user.id) != user_id and not current_user.is_admin:
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="Access denied"
            )
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
        from backend.api.subscriptions import get_my_subscription
        
        if str(current_user.id) == user_id:
            return await get_my_subscription(current_user, db)
        else:
            # –î–ª—è –∞–¥–º–∏–Ω–∞ - –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥—Ä—É–≥–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user = db.query(User).filter(User.id == user_id).first()
            if not user:
                raise HTTPException(
                    status_code=status.HTTP_404_NOT_FOUND,
                    detail="User not found"
                )
            return await get_my_subscription(user, db)
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Error in get_payment_status endpoint: {str(e)}", exc_info=True)
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to get payment status"
        )

# =============================================================================
# –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ï –≠–ù–î–ü–û–ò–ù–¢–´ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å Robokassa
# =============================================================================

@router.get("/debug-prices")
async def debug_subscription_prices(db: Session = Depends(get_db)):
    """
    üîç –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω –ø–æ–¥–ø–∏—Å–æ–∫
    """
    try:
        plans = db.query(SubscriptionPlan).all()
        result = {
            "fixed_price_config": {
                "FIXED_SUBSCRIPTION_PRICE": FIXED_SUBSCRIPTION_PRICE,
                "SUBSCRIPTION_DURATION_DAYS": SUBSCRIPTION_DURATION_DAYS,
                "SUBSCRIPTION_PLAN_NAME": SUBSCRIPTION_PLAN_NAME,
                "MAX_ASSISTANTS": MAX_ASSISTANTS
            },
            "database_plans": {}
        }
        
        for plan in plans:
            result["database_plans"][plan.code] = {
                "name": plan.name,
                "price": float(plan.price),
                "max_assistants": plan.max_assistants,
                "is_active": plan.is_active,
                "created_at": plan.created_at.isoformat() if plan.created_at else None
            }
        
        logger.info(f"üîç Debug prices requested - fixed: {FIXED_SUBSCRIPTION_PRICE}, db plans: {len(plans)}")
        return result
        
    except Exception as e:
        logger.error(f"‚ùå Error in debug_subscription_prices: {str(e)}")
        return {
            "error": str(e),
            "fixed_price_config": {
                "FIXED_SUBSCRIPTION_PRICE": FIXED_SUBSCRIPTION_PRICE,
                "SUBSCRIPTION_DURATION_DAYS": SUBSCRIPTION_DURATION_DAYS
            }
        }

@router.get("/config-check")
async def check_robokassa_config():
    """
    üîç –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Robokassa
    –ü–æ–º–æ–≥–∞–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É 29 –∏ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    """
    try:
        from backend.services.payment_service import RobokassaService
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_check = RobokassaService.validate_configuration()
        
        logger.info(f"üîç Configuration check requested")
        logger.info(f"   Valid: {config_check['valid']}")
        logger.info(f"   Issues: {config_check['issues']}")
        logger.info(f"   Warnings: {config_check['warnings']}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—Å–∫—Ä—ã–≤–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é)
        return {
            "status": "ok" if config_check["valid"] else "error",
            "valid": config_check["valid"],
            "issues": config_check["issues"],
            "warnings": config_check["warnings"],
            "fixed_price": FIXED_SUBSCRIPTION_PRICE,
            "config": {
                "merchant_login": config_check["config"]["merchant_login"],
                "merchant_login_length": config_check["config"]["merchant_login_length"],
                "password1_length": config_check["config"]["password1_length"],
                "password2_length": config_check["config"]["password2_length"],
                "base_url": config_check["config"]["base_url"],
                "test_mode": config_check["config"]["test_mode"],
                "disable_shp_params": config_check["config"]["disable_shp_params"]
            },
            "recommendations": [
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ MERCHANT_LOGIN —Ç–æ—á–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ Robokassa",
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –ø–∞—Ä–æ–ª–∏ #1 –∏ #2 —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏",
                "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –±–ª–æ–∫ '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π' –≤ –∫–∞–±–∏–Ω–µ—Ç–µ",
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—É–±–ª–∏—á–Ω—ã–π –¥–æ–º–µ–Ω (–Ω–µ localhost) –¥–ª—è HOST_URL",
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–∞–≥–∞–∑–∏–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ Robokassa"
            ],
            "help_links": [
                "https://auth.robokassa.ru/ - –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç Robokassa",
                "https://docs.robokassa.ru/ - –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è",
                "https://robokassa.com/content/tipichnye-oshibki.html - –¢–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏"
            ]
        }
        
    except Exception as e:
        logger.error(f"‚ùå Error checking configuration: {str(e)}")
        return {
            "status": "error",
            "error": str(e),
            "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Robokassa"
        }

@router.post("/test-signature")
async def test_signature_generation(
    request: dict = Body(...)
):
    """
    üîß –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô endpoint –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∏
    –ü–æ–º–æ–≥–∞–µ—Ç –æ—Ç–ª–∞–¥–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–ø–∏—Å—å—é –ø—Ä–∏ –æ—à–∏–±–∫–µ 29
    """
    try:
        from backend.services.payment_service import RobokassaService
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        merchant_login = request.get("merchant_login", RobokassaService.MERCHANT_LOGIN)
        out_sum = request.get("out_sum", f"{FIXED_SUBSCRIPTION_PRICE:.2f}")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ü–µ–Ω—É
        inv_id = request.get("inv_id", "123456789")
        password = request.get("password", RobokassaService.PASSWORD_1)
        custom_params = request.get("custom_params", {"Shp_user_id": "test", "Shp_plan_code": "start"})
        
        logger.info(f"üîß Testing signature generation")
        logger.info(f"   merchant_login: '{merchant_login}'")
        logger.info(f"   out_sum: '{out_sum}' (fixed price: {FIXED_SUBSCRIPTION_PRICE})")
        logger.info(f"   inv_id: '{inv_id}'")
        logger.info(f"   custom_params: {custom_params}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
        signature = RobokassaService.generate_signature(
            merchant_login=merchant_login,
            out_sum=out_sum,
            inv_id=inv_id,
            password=password,
            custom_params=custom_params
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –≤—Ä—É—á–Ω—É—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        sign_string = f"{merchant_login}:{out_sum}:{inv_id}:{password}"
        if custom_params and not RobokassaService.DISABLE_SHP_PARAMS:
            sorted_params = sorted(custom_params.items())
            for key, value in sorted_params:
                sign_string += f":{key}={value}"
        
        return {
            "status": "ok",
            "signature": signature,
            "sign_string": sign_string,
            "fixed_price": FIXED_SUBSCRIPTION_PRICE,
            "parameters": {
                "merchant_login": merchant_login,
                "out_sum": out_sum,
                "inv_id": inv_id,
                "password_length": len(password),
                "custom_params": custom_params
            },
            "debug_info": {
                "sign_string_length": len(sign_string),
                "signature_length": len(signature),
                "disable_shp_params": RobokassaService.DISABLE_SHP_PARAMS
            }
        }
        
    except Exception as e:
        logger.error(f"‚ùå Error testing signature: {str(e)}")
        return {
            "status": "error",
            "error": str(e),
            "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∏"
        }

@router.post("/enable-diagnostic-mode")
async def enable_diagnostic_mode():
    """
    üîß –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô endpoint –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –±–µ–∑ Shp_ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    –ü–æ–º–æ–≥–∞–µ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞—Ç–µ–∂ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ 29
    """
    try:
        from backend.services.payment_service import RobokassaService
        
        # –í–∫–ª—é—á–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º
        RobokassaService.DISABLE_SHP_PARAMS = True
        
        logger.info(f"üîß Diagnostic mode enabled: Shp_ parameters disabled")
        
        return {
            "status": "ok",
            "message": "–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω - Shp_ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã",
            "disable_shp_params": True,
            "fixed_price": FIXED_SUBSCRIPTION_PRICE,
            "instructions": [
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ —Å–Ω–æ–≤–∞",
                "–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ 29 –∏—Å—á–µ–∑–ª–∞, –ø—Ä–æ–±–ª–µ–º–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ Shp_ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤",
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º—É–ª—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è Shp_ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤",
                "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤—ã–∫–ª—é—á–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
            ]
        }
        
    except Exception as e:
        logger.error(f"‚ùå Error enabling diagnostic mode: {str(e)}")
        return {
            "status": "error",
            "error": str(e)
        }

@router.post("/disable-diagnostic-mode")
async def disable_diagnostic_mode():
    """
    üîß –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô endpoint –¥–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –±–µ–∑ Shp_ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    """
    try:
        from backend.services.payment_service import RobokassaService
        
        # –í—ã–∫–ª—é—á–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º
        RobokassaService.DISABLE_SHP_PARAMS = False
        
        logger.info(f"üîß Diagnostic mode disabled: Shp_ parameters enabled")
        
        return {
            "status": "ok",
            "message": "–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω - Shp_ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∫–ª—é—á–µ–Ω—ã",
            "disable_shp_params": False,
            "fixed_price": FIXED_SUBSCRIPTION_PRICE
        }
        
    except Exception as e:
        logger.error(f"‚ùå Error disabling diagnostic mode: {str(e)}")
        return {
            "status": "error",
            "error": str(e)
        }
