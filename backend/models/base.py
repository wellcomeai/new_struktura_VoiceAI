# backend/models/base.py - –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –≤–µ—Ä—Å–∏—è —Å –ø–æ–ª–Ω—ã–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º

"""
backend/models/base.py

–ë–∞–∑–æ–≤—ã–π –º–æ–¥—É–ª—å –¥–ª—è SQLAlchemy-–º–æ–¥–µ–ª–µ–π:
- –æ–±—ä—è–≤–ª—è–µ—Ç –¥–≤–∏–∂–æ–∫ `engine`
- –¥–µ–∫–ª–∞—Ä–∞—Ç–∏–≤–Ω—ã–π –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å `Base`
- –º–∏–∫—Å–∏–Ω `BaseModel` —Å to_dict()
- —Ñ—É–Ω–∫—Ü–∏—é create_tables_with_full_tracking() –¥–ª—è –ü–û–õ–ù–û–ì–û –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
"""

import os
import logging
from sqlalchemy import create_engine, inspect, text
from sqlalchemy.exc import SQLAlchemyError, ProgrammingError
from sqlalchemy.orm import declarative_base

logger = logging.getLogger(__name__)

# URL –±–∞–∑—ã –±–µ—Ä—ë—Ç—Å—è –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
DATABASE_URL = os.getenv("DATABASE_URL")
if not DATABASE_URL:
    raise RuntimeError("DATABASE_URL environment variable is not set")

# —Å–æ–∑–¥–∞—ë–º –¥–≤–∏–∂–æ–∫
engine = create_engine(DATABASE_URL, future=True)
logger.info(f"Database engine created for {DATABASE_URL}")

# –¥–µ–∫–ª–∞—Ä–∞—Ç–∏–≤–Ω—ã–π –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å
Base = declarative_base()

class BaseModel:
    """
    –ú–∏–∫—Å–∏–Ω –¥–ª—è SQLAlchemy-–º–æ–¥–µ–ª–µ–π, –¥–æ–±–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥ to_dict().
    """
    def to_dict(self):
        return {col.name: getattr(self, col.name) for col in self.__table__.columns}

def create_tables_with_full_tracking(engine):
    """
    ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: —Å–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—ã —Å –ü–û–õ–ù–´–ú –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–æ–∫
    –£—Å—Ç—Ä–∞–Ω—è–µ—Ç –æ—à–∏–±–∫—É 500 –ò —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è!
    """
    try:
        logger.info("üöÄ Starting database initialization with FULL tracking...")
        
        # ‚úÖ –°–æ–∑–¥–∞—ë–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ –æ–ø–∏—Å–∞–Ω–Ω—ã–º –º–æ–¥–µ–ª—è–º
        Base.metadata.create_all(engine)
        logger.info("‚úÖ All model tables created successfully")
        
        # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞—ë–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤—Ä—É—á–Ω—É—é
        inspector = inspect(engine)
        existing_tables = inspector.get_table_names()
        logger.info(f"üìã Existing tables: {existing_tables}")
        
        with engine.connect() as conn:
            # ‚úÖ –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É subscription_plans
            if 'subscription_plans' not in existing_tables:
                create_subscription_plans_sql = """
                CREATE TABLE IF NOT EXISTS subscription_plans (
                    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
                    name VARCHAR(50) NOT NULL,
                    code VARCHAR(20) NOT NULL UNIQUE,
                    price NUMERIC(10, 2) NOT NULL,
                    max_assistants INTEGER NOT NULL,
                    description TEXT,
                    is_active BOOLEAN DEFAULT TRUE,
                    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                    updated_at TIMESTAMP WITH TIME ZONE
                );
                """
                conn.execute(text(create_subscription_plans_sql))
                logger.info("‚úÖ Created subscription_plans table")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–ª–∞–Ω—ã
                insert_plans_sql = """
                INSERT INTO subscription_plans (code, name, price, max_assistants, description, is_active)
                VALUES 
                    ('free', 'Free Trial', 0, 1, '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Å –±–∞–∑–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏', true),
                    ('start', '–¢–∞—Ä–∏—Ñ –°—Ç–∞—Ä—Ç', 1490, 3, '–°—Ç–∞—Ä—Ç–æ–≤—ã–π –ø–ª–∞–Ω —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏', true),
                    ('pro', '–¢–∞—Ä–∏—Ñ –ü—Ä–æ', 4990, 10, '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Å–æ –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏', true)
                ON CONFLICT (code) DO NOTHING;
                """
                conn.execute(text(insert_plans_sql))
                logger.info("‚úÖ Inserted default subscription plans")
            
            # ‚úÖ –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É subscription_logs (–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û!)
            if 'subscription_logs' not in existing_tables:
                create_subscription_logs_sql = """
                CREATE TABLE IF NOT EXISTS subscription_logs (
                    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
                    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
                    action VARCHAR(50) NOT NULL,
                    plan_id UUID REFERENCES subscription_plans(id),
                    plan_code VARCHAR(20),
                    amount NUMERIC(10, 2),
                    payment_id VARCHAR(100),
                    details TEXT,
                    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
                );
                
                -- –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
                CREATE INDEX IF NOT EXISTS idx_subscription_logs_user_id ON subscription_logs(user_id);
                CREATE INDEX IF NOT EXISTS idx_subscription_logs_action ON subscription_logs(action);
                CREATE INDEX IF NOT EXISTS idx_subscription_logs_created_at ON subscription_logs(created_at);
                """
                conn.execute(text(create_subscription_logs_sql))
                logger.info("‚úÖ Created subscription_logs table with indexes")
            
            # ‚úÖ –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É payment_transactions (–î–õ–Ø –û–¢–ß–ï–¢–ù–û–°–¢–ò!)
            if 'payment_transactions' not in existing_tables:
                create_payment_transactions_sql = """
                CREATE TABLE IF NOT EXISTS payment_transactions (
                    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
                    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
                    plan_id UUID REFERENCES subscription_plans(id),
                    external_payment_id VARCHAR(100),
                    payment_system VARCHAR(50) DEFAULT 'robokassa',
                    amount NUMERIC(10, 2) NOT NULL,
                    currency VARCHAR(3) DEFAULT 'RUB',
                    status VARCHAR(20) DEFAULT 'pending',
                    is_processed BOOLEAN DEFAULT FALSE,
                    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                    paid_at TIMESTAMP WITH TIME ZONE,
                    processed_at TIMESTAMP WITH TIME ZONE,
                    payment_details VARCHAR(500),
                    error_message VARCHAR(500)
                );
                
                -- –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
                CREATE INDEX IF NOT EXISTS idx_payment_transactions_user_id ON payment_transactions(user_id);
                CREATE INDEX IF NOT EXISTS idx_payment_transactions_status ON payment_transactions(status);
                CREATE INDEX IF NOT EXISTS idx_payment_transactions_external_id ON payment_transactions(external_payment_id);
                CREATE INDEX IF NOT EXISTS idx_payment_transactions_created_at ON payment_transactions(created_at);
                """
                conn.execute(text(create_payment_transactions_sql))
                logger.info("‚úÖ Created payment_transactions table with indexes")
            
            # ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É users, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—è subscription_plan_id
                user_columns = [col['name'] for col in inspector.get_columns('users')]
                
                if 'subscription_plan_id' not in user_columns:
                    alter_users_sql = """
                    ALTER TABLE users 
                    ADD COLUMN IF NOT EXISTS subscription_plan_id UUID REFERENCES subscription_plans(id);
                    """
                    conn.execute(text(alter_users_sql))
                    logger.info("‚úÖ Added subscription_plan_id to users table")
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Could not update users table: {e}")
            
            conn.commit()
        
        logger.info("üéâ Database initialization with FULL tracking completed successfully!")
        
        # ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        with engine.connect() as conn:
            tables_count = conn.execute(text("""
                SELECT COUNT(*) FROM information_schema.tables 
                WHERE table_schema = 'public'
            """)).scalar()
            logger.info(f"üìä Total tables in database: {tables_count}")
        
    except Exception as e:
        logger.error(f"‚ùå Error during database initialization: {str(e)}")
        raise


def create_tables(engine):
    """
    ‚úÖ –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: —Å–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—ã —Å –ø–æ–ª–Ω—ã–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º
    """
    create_tables_with_full_tracking(engine)
