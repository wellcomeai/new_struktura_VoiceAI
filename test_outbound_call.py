"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –∏—Å—Ö–æ–¥—è—â–∏–º–∏ –∑–≤–æ–Ω–∫–∞–º–∏
"""
import asyncio
import httpx
import json

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
TEST_DATA = {
    "account_id": "12345678",
    "api_key": "test_api_key_12345",
    "rule_id": "123456",
    "script_custom_data": json.dumps({
        "phone_number": "+79001234567",
        "assistant_id": "test-assistant-id",
        "caller_id": "+1234567890"
    })
}

async def test_endpoint():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω–∞–ø—Ä—è–º—É—é"""
    print("="*70)
    print("üß™ –¢–ï–°–¢ –≠–ù–î–ü–û–ò–ù–¢–ê /api/voximplant/start-outbound-call")
    print("="*70)
    
    # URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    BASE_URL = "https://voicyfy.ru"  # –ò–ª–∏ http://localhost:5050 –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
    ENDPOINT = f"{BASE_URL}/api/voximplant/start-outbound-call"
    
    print(f"\nüìç URL: {ENDPOINT}")
    print(f"\nüì¶ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    print(json.dumps(TEST_DATA, indent=2, ensure_ascii=False))
    
    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            print("\nüöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å...")
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∫–∏
            
            # –°–ø–æ—Å–æ–± 1: JSON
            print("\n--- –ü–æ–ø—ã—Ç–∫–∞ 1: Content-Type: application/json ---")
            try:
                response1 = await client.post(
                    ENDPOINT,
                    json=TEST_DATA,
                    headers={"Content-Type": "application/json"}
                )
                print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {response1.status_code}")
                print(f"üìÑ –û—Ç–≤–µ—Ç: {response1.text}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            
            # –°–ø–æ—Å–æ–± 2: data (form-encoded)
            print("\n--- –ü–æ–ø—ã—Ç–∫–∞ 2: Content-Type: application/x-www-form-urlencoded ---")
            try:
                response2 = await client.post(
                    ENDPOINT,
                    data=TEST_DATA
                )
                print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {response2.status_code}")
                print(f"üìÑ –û—Ç–≤–µ—Ç: {response2.text}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            
            # –°–ø–æ—Å–æ–± 3: –ü—Ä—è–º–æ–π JSON –≤ content
            print("\n--- –ü–æ–ø—ã—Ç–∫–∞ 3: –ü—Ä—è–º–æ–π JSON –≤ content ---")
            try:
                response3 = await client.post(
                    ENDPOINT,
                    content=json.dumps(TEST_DATA),
                    headers={"Content-Type": "application/json"}
                )
                print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {response3.status_code}")
                print(f"üìÑ –û—Ç–≤–µ—Ç: {response3.text}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                
    except Exception as e:
        print(f"\n‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")

async def check_routes():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã"""
    print("\n"+"="*70)
    print("üîç –ü–†–û–í–ï–†–ö–ê –ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–ù–ù–´–• –ú–ê–†–®–†–£–¢–û–í")
    print("="*70)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        from app import app
        
        print("\nüìã –í—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:")
        
        voximplant_routes = []
        
        for route in app.routes:
            if hasattr(route, 'path') and hasattr(route, 'methods'):
                # –ò—â–µ–º –Ω–∞—à —ç–Ω–¥–ø–æ–∏–Ω—Ç
                if '/voximplant/' in route.path:
                    voximplant_routes.append({
                        'path': route.path,
                        'methods': list(route.methods),
                        'name': route.name
                    })
        
        if voximplant_routes:
            print("\n‚úÖ –ù–∞–π–¥–µ–Ω—ã Voximplant –º–∞—Ä—à—Ä—É—Ç—ã:")
            for route in voximplant_routes:
                print(f"   {route['methods']} {route['path']} (name: {route['name']})")
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—à –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
            our_endpoint = [r for r in voximplant_routes if 'start-outbound-call' in r['path']]
            
            if our_endpoint:
                print(f"\n‚úÖ –≠–Ω–¥–ø–æ–∏–Ω—Ç /api/voximplant/start-outbound-call –ù–ê–ô–î–ï–ù!")
                print(f"   –ú–µ—Ç–æ–¥—ã: {our_endpoint[0]['methods']}")
            else:
                print(f"\n‚ùå –≠–Ω–¥–ø–æ–∏–Ω—Ç /api/voximplant/start-outbound-call –ù–ï –ù–ê–ô–î–ï–ù!")
        else:
            print("\n‚ùå Voximplant –º–∞—Ä—à—Ä—É—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤: {e}")
        import traceback
        traceback.print_exc()

async def check_function_signature():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É —Ñ—É–Ω–∫—Ü–∏–∏"""
    print("\n"+"="*70)
    print("üî¨ –ü–†–û–í–ï–†–ö–ê –°–ò–ì–ù–ê–¢–£–†–´ –§–£–ù–ö–¶–ò–ò")
    print("="*70)
    
    try:
        from backend.api import voximplant
        import inspect
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        func = voximplant.start_outbound_call
        
        print("\nüìù –°–∏–≥–Ω–∞—Ç—É—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–∏ start_outbound_call:")
        print(f"   {inspect.signature(func)}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        params = inspect.signature(func).parameters
        
        print("\nüìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ—É–Ω–∫—Ü–∏–∏:")
        for param_name, param in params.items():
            print(f"   - {param_name}: {param.annotation}")
            print(f"     default: {param.default}")
            
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("\n" + "üîß"*35)
    print("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –≠–ù–î–ü–û–ò–ù–¢–ê –ò–°–•–û–î–Ø–©–ò–• –ó–í–û–ù–ö–û–í")
    print("üîß"*35 + "\n")
    
    # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
    await check_routes()
    
    # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É —Ñ—É–Ω–∫—Ü–∏–∏
    await check_function_signature()
    
    # –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç
    await test_endpoint()
    
    print("\n" + "‚úÖ"*35)
    print("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
    print("‚úÖ"*35 + "\n")

if __name__ == "__main__":
    asyncio.run(main())
