# backend/api/conversations.py
"""
Conversations API endpoints –¥–ª—è WellcomeAI application.
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞–º–∏ –∏ –∏—Å—Ç–æ—Ä–∏–µ–π —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤.
Version: 1.2 - Full dialog support with session grouping
"""

from fastapi import APIRouter, Depends, HTTPException, status, Query
from sqlalchemy.orm import Session
from typing import Optional, List
from datetime import datetime

from backend.core.logging import get_logger
from backend.db.session import get_db
from backend.services.conversation_service import ConversationService
from backend.services.auth_service import AuthService
from backend.models.user import User
from backend.models.conversation import Conversation
from backend.models.assistant import AssistantConfig

logger = get_logger(__name__)

# Create router
router = APIRouter()


@router.get("/")
async def get_conversations(
    assistant_id: Optional[str] = Query(None, description="–§–∏–ª—å—Ç—Ä –ø–æ ID –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"),
    caller_number: Optional[str] = Query(None, description="–§–∏–ª—å—Ç—Ä –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞"),
    session_id: Optional[str] = Query(None, description="–§–∏–ª—å—Ç—Ä –ø–æ ID —Å–µ—Å—Å–∏–∏"),
    date_from: Optional[str] = Query(None, description="–§–∏–ª—å—Ç—Ä: –¥–∏–∞–ª–æ–≥–∏ –ø–æ—Å–ª–µ –¥–∞—Ç—ã (ISO format)"),
    date_to: Optional[str] = Query(None, description="–§–∏–ª—å—Ç—Ä: –¥–∏–∞–ª–æ–≥–∏ –¥–æ –¥–∞—Ç—ã (ISO format)"),
    limit: int = Query(50, ge=1, le=100, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π (–º–∞–∫—Å 100)"),
    offset: int = Query(0, ge=0, description="–°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"),
    current_user: User = Depends(AuthService.get_current_user),
    db: Session = Depends(get_db)
):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    
    –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.
    
    **–§–∏–ª—å—Ç—Ä—ã:**
    - assistant_id: –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–∏–∞–ª–æ–≥–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    - caller_number: –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥–∏ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    - session_id: –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥–∏ –∏–∑ –æ–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏
    - date_from/date_to: –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
    
    **–ü–∞–≥–∏–Ω–∞—Ü–∏—è:**
    - limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (1-100)
    - offset: –°–º–µ—â–µ–Ω–∏–µ (–¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü)
    
    **–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:**
    - conversations: –°–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤
    - total: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    - page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    - page_size: –†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    """
    try:
        logger.info(f"[CONVERSATIONS-API] Get conversations request from user {current_user.id}")
        logger.info(f"   Filters: assistant_id={assistant_id}, caller={caller_number}, "
                   f"session={session_id}, date_from={date_from}, date_to={date_to}")
        logger.info(f"   Pagination: limit={limit}, offset={offset}")
        
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—ã –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
        date_from_parsed = None
        date_to_parsed = None
        
        if date_from:
            try:
                date_from_parsed = datetime.fromisoformat(date_from.replace('Z', '+00:00'))
            except ValueError as e:
                logger.warning(f"Invalid date_from format: {date_from}")
                raise HTTPException(
                    status_code=status.HTTP_400_BAD_REQUEST,
                    detail=f"Invalid date_from format. Use ISO format (YYYY-MM-DDTHH:MM:SS)"
                )
        
        if date_to:
            try:
                date_to_parsed = datetime.fromisoformat(date_to.replace('Z', '+00:00'))
            except ValueError as e:
                logger.warning(f"Invalid date_to format: {date_to}")
                raise HTTPException(
                    status_code=status.HTTP_400_BAD_REQUEST,
                    detail=f"Invalid date_to format. Use ISO format (YYYY-MM-DDTHH:MM:SS)"
                )
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ª–æ–≥–∏
        result = ConversationService.get_conversations_advanced(
            db=db,
            assistant_id=assistant_id,
            user_id=str(current_user.id),  # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ç–æ–ª—å–∫–æ –µ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã)
            caller_number=caller_number,
            session_id=session_id,
            date_from=date_from_parsed,
            date_to=date_to_parsed,
            limit=limit,
            offset=offset
        )
        
        logger.info(f"‚úÖ Returned {len(result['conversations'])} conversations (total: {result['total']})")
        
        return result
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Error getting conversations: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to get conversations: {str(e)}"
        )


@router.get("/{conversation_id}")
async def get_conversation_detail(
    conversation_id: str,
    include_functions: bool = Query(True, description="–í–∫–ª—é—á–∏—Ç—å –ª–æ–≥–∏ –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π"),
    current_user: User = Depends(AuthService.get_current_user),
    db: Session = Depends(get_db)
):
    """
    –ü–æ–ª—É—á–∏—Ç—å –ü–û–õ–ù–´–ô –¥–∏–∞–ª–æ–≥ (–≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–µ—Å—Å–∏–∏).
    
    üÜï v1.2: –ó–∞–≥—Ä—É–∂–∞–µ—Ç –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ session_id –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–∞—Ç–∞
    
    –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –¥–∏–∞–ª–æ–≥–∏.
    
    **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**
    - conversation_id: UUID –ª—é–±–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –¥–∏–∞–ª–æ–≥–∞
    - include_functions: –í–∫–ª—é—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—ã–∑–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é true)
    
    **–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:**
    - messages: –ú–∞—Å—Å–∏–≤ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Å–µ—Å—Å–∏–∏ (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏)
    - assistant_id: ID –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    - assistant_name: –ò–º—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    - session_id: ID —Å–µ—Å—Å–∏–∏
    - caller_number: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    - total_tokens: –°—É–º–º–∞ —Ç–æ–∫–µ–Ω–æ–≤
    - total_duration: –°—É–º–º–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    - function_calls: –í—Å–µ –≤—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ —Å–µ—Å—Å–∏–∏
    """
    try:
        logger.info(f"[CONVERSATIONS-API] Get full dialog for conversation: {conversation_id}")
        logger.info(f"   User: {current_user.id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        from uuid import UUID
        try:
            conv_uuid = UUID(conversation_id)
        except ValueError:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Invalid conversation ID format"
            )
        
        conversation = db.query(Conversation).filter(Conversation.id == conv_uuid).first()
        
        if not conversation:
            logger.warning(f"Conversation not found: {conversation_id}")
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Conversation not found"
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        assistant = db.query(AssistantConfig).filter(
            AssistantConfig.id == conversation.assistant_id
        ).first()
        
        if not assistant or str(assistant.user_id) != str(current_user.id):
            logger.warning(f"Access denied: conversation {conversation_id} doesn't belong to user {current_user.id}")
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="Access denied: this conversation doesn't belong to you"
            )
        
        # üÜï –ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
        session_id = conversation.session_id
        
        all_messages = db.query(Conversation).filter(
            Conversation.session_id == session_id,
            Conversation.assistant_id == conversation.assistant_id
        ).order_by(Conversation.created_at.asc()).all()  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        
        logger.info(f"   Found {len(all_messages)} messages in session {session_id}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        messages = []
        total_tokens = 0
        total_duration = 0
        
        for msg in all_messages:
            # User message
            if msg.user_message:
                messages.append({
                    "id": str(msg.id),
                    "type": "user",
                    "text": msg.user_message,
                    "timestamp": msg.created_at.isoformat() if msg.created_at else None
                })
            
            # Assistant message
            if msg.assistant_message:
                messages.append({
                    "id": str(msg.id),
                    "type": "assistant",
                    "text": msg.assistant_message,
                    "timestamp": msg.created_at.isoformat() if msg.created_at else None
                })
            
            # –°—É–º–º–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏
            total_tokens += msg.tokens_used or 0
            total_duration += msg.duration_seconds or 0
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º function calls –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        function_calls = []
        if include_functions:
            from backend.models.function_log import FunctionLog
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ ID —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Å–µ—Å—Å–∏–∏
            message_ids = [msg.id for msg in all_messages]
            
            logs = db.query(FunctionLog).filter(
                FunctionLog.conversation_id.in_(message_ids)
            ).order_by(FunctionLog.created_at).all()
            
            function_calls = [
                {
                    "id": str(log.id),
                    "function_name": log.function_name,
                    "arguments": log.arguments,
                    "result": log.result,
                    "status": log.status,
                    "created_at": log.created_at.isoformat() if log.created_at else None
                }
                for log in logs
            ]
            
            logger.info(f"   Found {len(function_calls)} function calls")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        result = {
            "session_id": session_id,
            "assistant_id": str(conversation.assistant_id),
            "assistant_name": assistant.name,
            "caller_number": conversation.caller_number,
            "created_at": all_messages[0].created_at.isoformat() if all_messages else None,
            "messages": messages,
            "total_messages": len(messages),
            "total_tokens": total_tokens,
            "total_duration": total_duration,
            "function_calls": function_calls if include_functions else []
        }
        
        logger.info(f"‚úÖ Full dialog returned: {len(messages)} messages")
        
        return result
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Error getting conversation detail: {e}")
        logger.error(f"   Traceback: ", exc_info=True)
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to get conversation detail: {str(e)}"
        )


@router.get("/stats")
async def get_conversations_stats(
    assistant_id: Optional[str] = Query(None, description="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É"),
    days: int = Query(30, ge=1, le=365, description="–ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π (1-365)"),
    current_user: User = Depends(AuthService.get_current_user),
    db: Session = Depends(get_db)
):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–∏–∞–ª–æ–≥–∞–º.
    
    –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.
    
    **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**
    - assistant_id: ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    - days: –ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Å—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30)
    
    **–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:**
    - total_conversations: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏–∞–ª–æ–≥–æ–≤
    - conversations_last_X_days: –î–∏–∞–ª–æ–≥–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    - conversations_today: –î–∏–∞–ª–æ–≥–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    - avg_duration_seconds: –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–∏–∞–ª–æ–≥–∞
    - total_tokens_used: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
    """
    try:
        logger.info(f"[CONVERSATIONS-API] Get stats for user {current_user.id}")
        logger.info(f"   Assistant ID: {assistant_id}")
        logger.info(f"   Days: {days}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = ConversationService.get_conversation_stats(
            db=db,
            assistant_id=assistant_id,
            user_id=str(current_user.id),
            days=days
        )
        
        logger.info(f"‚úÖ Stats returned: {stats}")
        
        return stats
        
    except Exception as e:
        logger.error(f"‚ùå Error getting conversation stats: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to get conversation stats: {str(e)}"
        )


@router.get("/by-caller/{caller_number}")
async def get_conversations_by_caller(
    caller_number: str,
    assistant_id: Optional[str] = Query(None, description="–§–∏–ª—å—Ç—Ä –ø–æ ID –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"),
    limit: int = Query(50, ge=1, le=100, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π"),
    offset: int = Query(0, ge=0, description="–°–º–µ—â–µ–Ω–∏–µ"),
    current_user: User = Depends(AuthService.get_current_user),
    db: Session = Depends(get_db)
):
    """
    –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
    
    –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—â–µ–Ω–∏—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º.
    
    –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.
    
    **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**
    - caller_number: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ñ–æ—Ä–º–∞—Ç –ª—é–±–æ–π)
    - assistant_id: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –ø–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É
    - limit/offset: –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    
    **–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:**
    - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤ —Å —ç—Ç–∏–º –Ω–æ–º–µ—Ä–æ–º
    - –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–µ)
    """
    try:
        logger.info(f"[CONVERSATIONS-API] Get conversations by caller: {caller_number}")
        logger.info(f"   User: {current_user.id}")
        logger.info(f"   Assistant filter: {assistant_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ª–æ–≥–∏
        result = ConversationService.get_conversations_advanced(
            db=db,
            assistant_id=assistant_id,
            user_id=str(current_user.id),
            caller_number=caller_number,
            limit=limit,
            offset=offset
        )
        
        logger.info(f"‚úÖ Found {len(result['conversations'])} conversations for caller {caller_number}")
        
        return result
        
    except Exception as e:
        logger.error(f"‚ùå Error getting conversations by caller: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to get conversations by caller: {str(e)}"
        )
