"""
Payment service for WellcomeAI application with partner commission integration.
Handles Robokassa payment integration with automatic partner commission processing.
"""

import hashlib
import hmac
import base64
import json
from datetime import datetime, timedelta, timezone
from typing import Dict, Any, Optional
from urllib.parse import urlencode, quote
from fastapi import HTTPException, status
from sqlalchemy.orm import Session

from backend.core.logging import get_logger
from backend.core.config import settings
from backend.models.user import User
from backend.models.subscription import SubscriptionPlan, PaymentTransaction
from backend.services.subscription_service import SubscriptionService

logger = get_logger(__name__)

class RobokassaService:
    """Service for Robokassa integration with partner commission processing"""
    
    # Robokassa –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    MERCHANT_LOGIN = settings.ROBOKASSA_MERCHANT_LOGIN
    PASSWORD_1 = settings.ROBOKASSA_PASSWORD_1
    PASSWORD_2 = settings.ROBOKASSA_PASSWORD_2
    
    # URLs –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    BASE_URL = settings.HOST_URL
    RESULT_URL = f"{BASE_URL}/api/payments/robokassa-result"
    SUCCESS_URL = f"{BASE_URL}/api/payments/success"
    FAIL_URL = f"{BASE_URL}/api/payments/cancel"
    
    # Robokassa URLs
    PAYMENT_URL = "https://auth.robokassa.ru/Merchant/Index.aspx"
    TEST_MODE = settings.ROBOKASSA_TEST_MODE
    
    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
    DEFAULT_SUBSCRIPTION_PRICE = 1490.0
    DEFAULT_SUBSCRIPTION_DURATION_DAYS = 30
    
    # üîß –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –†–ï–ñ–ò–ú - –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è Shp_ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    DISABLE_SHP_PARAMS = False
    
    # ‚ö†Ô∏è –í–†–ï–ú–ï–ù–ù–û–ï –û–¢–ö–õ–Æ–ß–ï–ù–ò–ï –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    DISABLE_SIGNATURE_VERIFICATION = True  # ‚Üê –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ê–ï–ú!
    
    @staticmethod
    def validate_configuration() -> Dict[str, Any]:
        """
        üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        """
        issues = []
        warnings = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ MERCHANT_LOGIN
        if not RobokassaService.MERCHANT_LOGIN:
            issues.append("ROBOKASSA_MERCHANT_LOGIN –Ω–µ –∑–∞–¥–∞–Ω")
        elif RobokassaService.MERCHANT_LOGIN.lower() in ["demo", "test", "example"]:
            issues.append(f"ROBOKASSA_MERCHANT_LOGIN —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {RobokassaService.MERCHANT_LOGIN}")
        elif len(RobokassaService.MERCHANT_LOGIN.strip()) != len(RobokassaService.MERCHANT_LOGIN):
            warnings.append("ROBOKASSA_MERCHANT_LOGIN —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ PASSWORD_1
        if not RobokassaService.PASSWORD_1:
            issues.append("ROBOKASSA_PASSWORD_1 –Ω–µ –∑–∞–¥–∞–Ω")
        elif RobokassaService.PASSWORD_1.lower() in ["password_1", "demo", "test"]:
            issues.append(f"ROBOKASSA_PASSWORD_1 —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–µ–º–æ-–∑–Ω–∞—á–µ–Ω–∏–µ")
        elif len(RobokassaService.PASSWORD_1) < 8:
            issues.append("ROBOKASSA_PASSWORD_1 —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤)")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ PASSWORD_2
        if not RobokassaService.PASSWORD_2:
            issues.append("ROBOKASSA_PASSWORD_2 –Ω–µ –∑–∞–¥–∞–Ω")
        elif RobokassaService.PASSWORD_2.lower() in ["password_2", "demo", "test"]:
            issues.append(f"ROBOKASSA_PASSWORD_2 —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–µ–º–æ-–∑–Ω–∞—á–µ–Ω–∏–µ")
        elif RobokassaService.PASSWORD_1 == RobokassaService.PASSWORD_2:
            issues.append("ROBOKASSA_PASSWORD_1 –∏ ROBOKASSA_PASSWORD_2 –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ (–¥–æ–ª–∂–Ω—ã —Ä–∞–∑–ª–∏—á–∞—Ç—å—Å—è)")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ BASE_URL
        if not RobokassaService.BASE_URL:
            issues.append("HOST_URL –Ω–µ –∑–∞–¥–∞–Ω")
        elif any(x in RobokassaService.BASE_URL for x in ["localhost", "127.0.0.1", "0.0.0.0"]):
            issues.append(f"HOST_URL —Å–æ–¥–µ—Ä–∂–∏—Ç localhost: {RobokassaService.BASE_URL}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∏
        if RobokassaService.DISABLE_SIGNATURE_VERIFICATION:
            warnings.append("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –û–¢–ö–õ–Æ–ß–ï–ù–ê! –≠—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ä–∞.")
        
        return {
            "valid": len(issues) == 0,
            "issues": issues,
            "warnings": warnings,
            "config": {
                "merchant_login": RobokassaService.MERCHANT_LOGIN,
                "merchant_login_length": len(RobokassaService.MERCHANT_LOGIN) if RobokassaService.MERCHANT_LOGIN else 0,
                "password1_length": len(RobokassaService.PASSWORD_1) if RobokassaService.PASSWORD_1 else 0,
                "password2_length": len(RobokassaService.PASSWORD_2) if RobokassaService.PASSWORD_2 else 0,
                "base_url": RobokassaService.BASE_URL,
                "test_mode": RobokassaService.TEST_MODE,
                "disable_shp_params": RobokassaService.DISABLE_SHP_PARAMS,
                "disable_signature_verification": RobokassaService.DISABLE_SIGNATURE_VERIFICATION
            }
        }
    
    @staticmethod
    def generate_signature(
        merchant_login: str,
        out_sum: str,
        inv_id: str,
        password: str,
        custom_params: Optional[Dict[str, str]] = None
    ) -> str:
        """
        ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
        """
        try:
            logger.info(f"üîê SIGNATURE GENERATION:")
            logger.info(f"   merchant_login: '{merchant_login}' (length: {len(merchant_login)})")
            logger.info(f"   out_sum: '{out_sum}' (type: {type(out_sum)})")
            logger.info(f"   inv_id: '{inv_id}' (type: {type(inv_id)})")
            logger.info(f"   password: '[HIDDEN]' (length: {len(password)})")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if not merchant_login or not merchant_login.strip():
                raise ValueError("merchant_login –ø—É—Å—Ç–æ–π")
            if not out_sum or not str(out_sum).strip():
                raise ValueError("out_sum –ø—É—Å—Ç–æ–π")
            if not inv_id or not str(inv_id).strip():
                raise ValueError("inv_id –ø—É—Å—Ç–æ–π")
            if not password or not password.strip():
                raise ValueError("password –ø—É—Å—Ç–æ–π")
            
            # –û—á–∏—Å—Ç–∫–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
            merchant_login = merchant_login.strip()
            out_sum = str(out_sum).strip()
            inv_id = str(inv_id).strip()
            password = password.strip()
            
            # –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞: MerchantLogin:OutSum:InvId:Password
            sign_string = f"{merchant_login}:{out_sum}:{inv_id}:{password}"
            
            logger.info(f"   base_string: '{sign_string}'")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω—ã
            if custom_params and not RobokassaService.DISABLE_SHP_PARAMS:
                sorted_params = sorted(custom_params.items())
                logger.info(f"   custom_params (sorted): {sorted_params}")
                
                for key, value in sorted_params:
                    param_string = f"{key}={value}"
                    sign_string += f":{param_string}"
                    logger.info(f"   added param: '{param_string}'")
            elif RobokassaService.DISABLE_SHP_PARAMS:
                logger.info(f"   üîß DIAGNOSTIC MODE: Shp_ parameters disabled")
            else:
                logger.info(f"   no custom_params provided")
            
            logger.info(f"üîê Final signature string: '{sign_string}'")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º MD5 —Ö–µ—à
            signature = hashlib.md5(sign_string.encode('utf-8')).hexdigest().upper()
            
            logger.info(f"‚úÖ Generated signature: '{signature}'")
            
            return signature
            
        except Exception as e:
            logger.error(f"‚ùå Error generating signature: {str(e)}")
            raise
    
    @classmethod
    async def process_payment_result(
        cls,
        db: Session,
        form_data: Dict[str, Any]
    ) -> str:
        """
        ‚ö†Ô∏è –í–†–ï–ú–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–∏
        üÜï –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ê —Å –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π —Å–∏—Å—Ç–µ–º–æ–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–π
        """
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            out_sum = form_data.get("OutSum", "")
            inv_id = form_data.get("InvId", "")
            signature_value = form_data.get("SignatureValue", "")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            custom_params = {}
            for key, value in form_data.items():
                if key.startswith("Shp_"):
                    custom_params[key] = value
            
            logger.info(f"üì• Processing payment result:")
            logger.info(f"   InvId: {inv_id}")
            logger.info(f"   OutSum: {out_sum}")
            logger.info(f"   SignatureValue: {signature_value[:10]}...")
            logger.info(f"   Custom params: {custom_params}")
            
            # ‚ö†Ô∏è –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ê–ï–ú –ü–†–û–í–ï–†–ö–£ –ü–û–î–ü–ò–°–ò
            if cls.DISABLE_SIGNATURE_VERIFICATION:
                logger.warning(f"‚ö†Ô∏è SIGNATURE VERIFICATION DISABLED - ACCEPTING ALL PAYMENTS!")
                logger.warning(f"‚ö†Ô∏è This is a TEMPORARY measure to fix OutSum format issue")
                logger.warning(f"‚ö†Ô∏è Re-enable signature verification after fixing the issue!")
                is_valid = True
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å —Å PASSWORD_2
                is_valid = cls.verify_result_signature(
                    out_sum,
                    inv_id,
                    cls.PASSWORD_2,
                    signature_value,
                    custom_params
                )
            
            if not is_valid:
                logger.error(f"‚ùå Invalid signature for payment {inv_id}")
                return "FAIL"
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            user_id = custom_params.get("Shp_user_id")
            plan_code = custom_params.get("Shp_plan_code", "start")
            
            if not user_id:
                logger.error(f"‚ùå Missing user_id in payment {inv_id}")
                return "FAIL"
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = db.query(User).filter(User.id == user_id).first()
            if not user:
                logger.error(f"‚ùå User {user_id} not found for payment {inv_id}")
                return "FAIL"
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω
            plan = db.query(SubscriptionPlan).filter(SubscriptionPlan.code == plan_code).first()
            if not plan:
                logger.error(f"‚ùå Plan {plan_code} not found for payment {inv_id}")
                return "FAIL"
            
            # ‚úÖ –û–ë–ù–û–í–õ–Ø–ï–ú –ü–û–î–ü–ò–°–ö–£ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
            now = datetime.now(timezone.utc)
            
            # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –æ—Ç –µ—ë –æ–∫–æ–Ω—á–∞–Ω–∏—è
            start_date = now
            if user.subscription_end_date and user.subscription_end_date > now:
                start_date = user.subscription_end_date
            
            duration_days = getattr(settings, 'SUBSCRIPTION_DURATION_DAYS', cls.DEFAULT_SUBSCRIPTION_DURATION_DAYS)
            user.subscription_start_date = start_date
            user.subscription_end_date = start_date + timedelta(days=duration_days)
            user.subscription_plan_id = plan.id
            user.is_trial = False  # –ë–æ–ª—å—à–µ –Ω–µ —Ç—Ä–∏–∞–ª
            
            # ‚úÖ –û–ë–ù–û–í–õ–Ø–ï–ú –°–¢–ê–¢–£–° –¢–†–ê–ù–ó–ê–ö–¶–ò–ò
            transaction = db.query(PaymentTransaction).filter(
                PaymentTransaction.external_payment_id == inv_id
            ).first()
            
            if transaction:
                transaction.status = "success"
                transaction.paid_at = now
                transaction.processed_at = now
                transaction.is_processed = True
                if cls.DISABLE_SIGNATURE_VERIFICATION:
                    transaction.payment_details += " [Signature verification disabled]"
            
            # üéØ –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É, –ø–æ—Ç–æ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é
            db.commit()
            
            logger.info(f"‚úÖ Subscription activated for user {user_id} until {user.subscription_end_date}")
            
            # üÜï –û–ë–†–ê–ë–û–¢–ö–ê –ü–ê–†–¢–ù–ï–†–°–ö–û–ô –ö–û–ú–ò–°–°–ò–ò
            try:
                logger.info(f"üí∞ Processing partner commission for payment {inv_id}")
                
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
                from backend.services.partner_service import PartnerService
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é –ø–∞—Ä—Ç–Ω–µ—Ä–∞
                await PartnerService.process_referral_payment(
                    db=db,
                    user_id=user_id,
                    transaction=transaction,
                    amount=float(out_sum)
                )
                
                logger.info(f"‚úÖ Partner commission processing completed for payment {inv_id}")
                
            except Exception as partner_error:
                logger.error(f"‚ùå Error processing partner commission: {str(partner_error)}")
                # –ù–ï –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –ø–ª–∞—Ç–µ–∂–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã
                # –ü–ª–∞—Ç–µ–∂ —Å—á–∏—Ç–∞–µ—Ç—Å—è —É—Å–ø–µ—à–Ω—ã–º, –∫–æ–º–∏—Å—Å–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –ø–æ–∑–∂–µ
            
            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É
            await SubscriptionService.log_subscription_event(
                db=db,
                user_id=user_id,
                action="payment_success",
                plan_id=str(plan.id),
                plan_code=plan_code,
                details=f"Payment processed successfully. InvId: {inv_id}, Amount: {out_sum}, Subscription until: {user.subscription_end_date.strftime('%Y-%m-%d')}. Signature verification: {'disabled' if cls.DISABLE_SIGNATURE_VERIFICATION else 'enabled'}"
            )
            
            logger.info(f"‚úÖ Payment {inv_id} processed successfully for user {user_id}")
            
            if cls.DISABLE_SIGNATURE_VERIFICATION:
                logger.warning(f"‚ö†Ô∏è Payment processed with DISABLED signature verification!")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è Robokassa
            return f"OK{inv_id}"
            
        except Exception as e:
            logger.error(f"‚ùå Error processing payment result: {str(e)}")
            return "FAIL"
    
    @staticmethod
    def verify_result_signature(
        out_sum: str,
        inv_id: str,
        password: str,
        received_signature: str,
        custom_params: Optional[Dict[str, str]] = None
    ) -> bool:
        """
        ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ—Ç Robokassa
        –§–æ—Ä–º—É–ª–∞ –¥–ª—è ResultURL: OutSum:InvId:Password2[:Shp_item=value]
        """
        try:
            # –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è ResultURL: OutSum:InvId:Password2
            sign_string = f"{out_sum}:{inv_id}:{password}"
            
            logger.info(f"üîç VERIFYING RESULT SIGNATURE:")
            logger.info(f"   out_sum: '{out_sum}'")
            logger.info(f"   inv_id: '{inv_id}'")
            logger.info(f"   password2: '[HIDDEN]' (length: {len(password)})")
            logger.info(f"   received_signature: '{received_signature}'")
            logger.info(f"   custom_params: {custom_params}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            if custom_params and not RobokassaService.DISABLE_SHP_PARAMS:
                sorted_params = sorted(custom_params.items())
                for key, value in sorted_params:
                    param_string = f"{key}={value}"
                    sign_string += f":{param_string}"
                    logger.info(f"   added verification param: '{param_string}'")
            
            logger.info(f"üîç Verification string: '{sign_string}'")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
            expected_signature = hashlib.md5(sign_string.encode('utf-8')).hexdigest().upper()
            
            logger.info(f"üîç Expected signature: '{expected_signature}'")
            logger.info(f"üîç Received signature: '{received_signature.upper()}'")
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∏
            is_valid = expected_signature == received_signature.upper()
            
            if not is_valid:
                logger.error(f"‚ùå Signature mismatch!")
                logger.error(f"   Expected: {expected_signature}")
                logger.error(f"   Received: {received_signature}")
            else:
                logger.info(f"‚úÖ Signature is valid")
            
            return is_valid
            
        except Exception as e:
            logger.error(f"‚ùå Error verifying signature: {str(e)}")
            return False
    
    @staticmethod
    def get_payment_status_message(success: bool = True) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if success:
            return {
                "success": True,
                "title": "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!",
                "message": "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.",
                "redirect_url": "/static/dashboard.html"
            }
        else:
            return {
                "success": False,
                "title": "–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
                "message": "–ü–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑.",
                "redirect_url": "/static/dashboard.html"
            }
