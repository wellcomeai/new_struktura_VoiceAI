import os
import sys
import importlib
import importlib.util
import importlib.abc
import types
import uvicorn
import logging
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Add current directory to Python path
current_dir = os.path.dirname(os.path.abspath(__file__))
if current_dir not in sys.path:
    sys.path.append(current_dir)

# Meta import configuration
class BackendImportFinder(importlib.abc.MetaPathFinder):
    """
    Finder for redirecting imports without prefix to backend package.
    E.g., 'core.config' -> 'backend.core.config'
    """
    def __init__(self):
        self.prefix = 'backend.'
        self.main_modules = ['core', 'db', 'models', 'schemas', 'services', 'utils', 'api']
        self.imported_modules = set()

    def find_spec(self, fullname, path, target=None):
        if fullname in sys.modules:
            return None
        if fullname == 'websockets' or fullname.startswith('websockets.'):
            return None
        parts = fullname.split('.')
        if parts[0] not in self.main_modules:
            return None
        backend_name = self.prefix + fullname
        try:
            spec = importlib.util.find_spec(backend_name)
            if spec:
                self.imported_modules.add(fullname)
                loader = BackendImportLoader(fullname, backend_name)
                return importlib.machinery.ModuleSpec(fullname, loader)
        except (ImportError, AttributeError):
            pass
        return None

class BackendImportLoader(importlib.abc.Loader):
    """Loader for modules redirected to backend."""
    def __init__(self, fullname, backend_name):
        self.fullname = fullname
        self.backend_name = backend_name

    def create_module(self, spec):
        if self.fullname in sys.modules:
            return sys.modules[self.fullname]
        try:
            backend_module = importlib.import_module(self.backend_name)
            module = types.ModuleType(self.fullname)
            for attr in dir(backend_module):
                if not attr.startswith('__'):
                    setattr(module, attr, getattr(backend_module, attr))
            module.__file__ = getattr(backend_module, '__file__', None)
            module.__name__ = self.fullname
            module.__package__ = self.fullname.rpartition('.')[0] or None
            if '.' in self.fullname:
                parent_name, _, child_name = self.fullname.rpartition('.')
                if parent_name in sys.modules:
                    setattr(sys.modules[parent_name], child_name, module)
            sys.modules[self.fullname] = module
            return module
        except Exception as e:
            print(f"Error loading module {self.fullname}: {e}")
            return None

    def exec_module(self, module):
        pass

# Insert our import finder
sys.meta_path.insert(0, BackendImportFinder())

# Settings for running
PORT = int(os.getenv('PORT', 5050))
DEBUG = os.getenv('DEBUG', 'False').lower() == 'true'
LOG_LEVEL = os.getenv('LOG_LEVEL', 'info').lower()

# ‚úÖ –ù–û–í–û–ï: –ê–≤—Ç–æ–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π Alembic –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
def run_alembic_migrations():
    """
    üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ Alembic –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    try:
        print("üîÑ –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ Alembic...")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Alembic
        from alembic.config import Config
        from alembic import command
        
        # –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Alembic
        alembic_cfg_path = os.path.join(os.path.dirname(__file__), "alembic.ini")
        
        if not os.path.exists(alembic_cfg_path):
            print(f"‚ùå –§–∞–π–ª alembic.ini –Ω–µ –Ω–∞–π–¥–µ–Ω: {alembic_cfg_path}")
            return False
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Alembic
        alembic_cfg = Config(alembic_cfg_path)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º DATABASE_URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        database_url = os.getenv("DATABASE_URL")
        if database_url:
            alembic_cfg.set_main_option("sqlalchemy.url", database_url)
            print(f"üîó –ò—Å–ø–æ–ª—å–∑—É–µ–º DATABASE_URL –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–π")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏
        print("üìä –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏...")
        command.upgrade(alembic_cfg, "head")
        
        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ Alembic —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!")
        return True
        
    except ImportError as e:
        print(f"‚ùå Alembic –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {str(e)}")
        print("   –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º alembic: pip install alembic")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π Alembic: {str(e)}")
        print(f"   –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        print(f"   –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        return False

# ‚úÖ –£–õ–£–ß–®–ï–ù–ù–ê–Ø: –§—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–µ–Ω (–∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)
def run_startup_fixes():
    """
    –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–µ–Ω –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (–∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –µ—Å–ª–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏)
    """
    try:
        print("üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ü–µ–Ω—ã –ø–æ–¥–ø–∏—Å–æ–∫...")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏
        from backend.db.session import SessionLocal
        from backend.models.subscription import SubscriptionPlan
        
        db = SessionLocal()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–ª–∞–Ω—ã –≤ –ë–î
        all_plans = db.query(SubscriptionPlan).all()
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ –ø–ª–∞–Ω–æ–≤ –≤ –ë–î: {len(all_plans)}")
        
        for plan in all_plans:
            print(f"   - {plan.code}: {plan.name} = {plan.price} —Ä—É–±")
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ü–µ–Ω—É –ø–ª–∞–Ω–∞ 'start'
        start_plan = db.query(SubscriptionPlan).filter(SubscriptionPlan.code == "start").first()
        if start_plan:
            if float(start_plan.price) != 1490.0:
                old_price = start_plan.price
                start_plan.price = 1490.0
                db.commit()
                print(f"‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –¶–µ–Ω–∞ –ø–ª–∞–Ω–∞ 'start': {old_price} ‚Üí 1490 —Ä—É–±–ª–µ–π")
            else:
                print(f"‚úÖ –¶–µ–Ω–∞ –ø–ª–∞–Ω–∞ 'start' —É–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è: 1490 —Ä—É–±–ª–µ–π")
        else:
            print("‚ö†Ô∏è  –ü–ª–∞–Ω 'start' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î - –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–ª–∞—Ç–µ–∂–µ")
            
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω 'start' –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            try:
                new_start_plan = SubscriptionPlan(
                    code="start",
                    name="–¢–∞—Ä–∏—Ñ –°—Ç–∞—Ä—Ç", 
                    price=1490.0,
                    max_assistants=3,
                    description="–°—Ç–∞—Ä—Ç–æ–≤—ã–π –ø–ª–∞–Ω —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏",
                    is_active=True
                )
                db.add(new_start_plan)
                db.commit()
                print("‚úÖ –°–æ–∑–¥–∞–Ω –ø–ª–∞–Ω 'start' —Å —Ü–µ–Ω–æ–π 1490 —Ä—É–±–ª–µ–π")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞ 'start': {str(e)}")
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ü–µ–Ω—É –ø–ª–∞–Ω–∞ 'pro' 
        pro_plan = db.query(SubscriptionPlan).filter(SubscriptionPlan.code == "pro").first()
        if pro_plan:
            if float(pro_plan.price) != 4990.0:
                old_price = pro_plan.price
                pro_plan.price = 4990.0
                db.commit()
                print(f"‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –¶–µ–Ω–∞ –ø–ª–∞–Ω–∞ 'pro': {old_price} ‚Üí 4990 —Ä—É–±–ª–µ–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
        updated_start_plan = db.query(SubscriptionPlan).filter(SubscriptionPlan.code == "start").first()
        if updated_start_plan:
            print(f"üîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —Ü–µ–Ω–∞ –ø–ª–∞–Ω–∞ 'start': {updated_start_plan.price} —Ä—É–±–ª–µ–π")
        
        db.close()
        print("üéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–µ–π: {str(e)}")
        print("   –í–æ–∑–º–æ–∂–Ω–æ, –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∏–ª–∏ –º–æ–¥–µ–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω: {str(e)}")
        print(f"   –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø—É—Å–∫ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ

# ‚úÖ –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def check_database_connection():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        print("üîó –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        
        from backend.db.session import SessionLocal
        
        db = SessionLocal()
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        result = db.execute("SELECT 1 as test").fetchone()
        
        if result and result[0] == 1:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ!")
            db.close()
            return True
        else:
            print("‚ùå –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –Ω–µ –ø—Ä–æ—à–µ–ª")
            db.close()
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return False

# Import FastAPI app
from app import app

# Expose application for Gunicorn
application = app

# Configure root logger
logger = logging.getLogger("wellcome-ai")

if __name__ == "__main__":
    logger.info(f"üöÄ Starting server on port {PORT}, debug={DEBUG}")
    
    print("=" * 70)
    print("üîÑ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–• –ò –ú–ò–ì–†–ê–¶–ò–ô")
    print("=" * 70)
    
    # ‚úÖ –®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    db_connected = check_database_connection()
    
    if db_connected:
        # ‚úÖ –®–ê–ì 2: –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ Alembic
        migrations_success = run_alembic_migrations()
        
        # ‚úÖ –®–ê–ì 3: –ó–∞–ø–∞—Å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω (–≤—Å–µ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è)
        print("\n" + "="*50)
        print("üîß –ü–†–û–í–ï–†–ö–ê –ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –¶–ï–ù")
        print("="*50)
        run_startup_fixes()
        
        if migrations_success:
            print("\nüéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ (–º–∏–≥—Ä–∞—Ü–∏–∏ + –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω)")
        else:
            print("\n‚ö†Ô∏è  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (—Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω)")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
        print("   –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è, –Ω–æ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ë–î")
    
    print("=" * 70)
    print("üöÄ –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê")  
    print("=" * 70)
    
    uvicorn.run(
        "app:app",
        host="0.0.0.0",
        port=PORT,
        log_level=LOG_LEVEL,
        reload=DEBUG,
        workers=1 if DEBUG else None,
        timeout_keep_alive=120,
    )
