# backend/functions/add_google_sheet_row.py
"""
–§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –≤ Google –¢–∞–±–ª–∏—Ü—É.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Service Account –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ø—É–±–ª–∏—á–Ω—ã–µ/–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã.
"""
import re
import asyncio
from typing import Dict, Any, Optional

from backend.core.logging import get_logger
from backend.functions.base import FunctionBase
from backend.functions.registry import register_function
from backend.services.google_sheets_service import GoogleSheetsService

logger = get_logger(__name__)

def extract_spreadsheet_id(url: str) -> Optional[str]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç ID —Ç–∞–±–ª–∏—Ü—ã –∏–∑ URL"""
    match = re.search(r'docs\.google\.com/spreadsheets/d/([a-zA-Z0-9-_]+)', url)
    return match.group(1) if match else None

@register_function
class AddGoogleSheetRowFunction(FunctionBase):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –≤ Google –¢–∞–±–ª–∏—Ü—É —á–µ—Ä–µ–∑ Service Account"""
    
    @classmethod
    def get_name(cls) -> str:
        return "add_google_sheet_row"
    
    @classmethod
    def get_description(cls) -> str:
        return "–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –≤ Google –¢–∞–±–ª–∏—Ü—É. –¢–∞–±–ª–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
    
    @classmethod
    def get_parameters(cls) -> Dict[str, Any]:
        return {
            "type": "object",
            "properties": {
                "url": {
                    "type": "string",
                    "description": "URL Google –¢–∞–±–ª–∏—Ü—ã"
                },
                "row_to_append": {
                    "type": "string",
                    "description": "–î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ ;; (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤;;ivan@mail.com;;+79991234567')"
                },
                "sheet_name": {
                    "type": "string",
                    "description": "–ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç)"
                }
            },
            "required": ["url", "row_to_append"]
        }
    
    @staticmethod
    async def execute(arguments: Dict[str, Any], context: Dict[str, Any] = None) -> Dict[str, Any]:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ Google –¢–∞–±–ª–∏—Ü—É —á–µ—Ä–µ–∑ –≤–∞—à Service Account.
        """
        try:
            url = arguments.get("url")
            row_to_append = arguments.get("row_to_append", "")
            sheet_name = arguments.get("sheet_name", "")
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            if not url:
                return {"error": "URL —Ç–∞–±–ª–∏—Ü—ã –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"}
            
            if not row_to_append:
                return {"error": "–î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"}
            
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ (—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å ;;)
            values = [v.strip() for v in row_to_append.split(";;")]
            
            if not values:
                return {"error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"}
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–∞–±–ª–∏—Ü—ã
            spreadsheet_id = extract_spreadsheet_id(url)
            
            if not spreadsheet_id:
                return {"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL Google –¢–∞–±–ª–∏—Ü—ã"}
            
            logger.info(f"[ADD_GOOGLE_SHEET_ROW] ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
            logger.info(f"[ADD_GOOGLE_SHEET_ROW] üìä Spreadsheet ID: {spreadsheet_id}")
            logger.info(f"[ADD_GOOGLE_SHEET_ROW] üìù Values: {values}")
            logger.info(f"[ADD_GOOGLE_SHEET_ROW] üìÑ Sheet: {sheet_name or 'default'}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π GoogleSheetsService —Å –≤–∞—à–∏–º Service Account
            loop = asyncio.get_event_loop()
            
            def append_row_sync():
                """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ thread pool"""
                try:
                    logger.info("[ADD_GOOGLE_SHEET_ROW] üîß –ü–æ–ª—É—á–∞–µ–º Sheets service...")
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à GoogleSheetsService (–æ–Ω —Å–∞–º –∑–Ω–∞–µ—Ç –ø—Ä–æ Service Account)
                    service = GoogleSheetsService._get_sheets_service()
                    
                    logger.info("[ADD_GOOGLE_SHEET_ROW] ‚úÖ Service –ø–æ–ª—É—á–µ–Ω")
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                    if sheet_name:
                        range_notation = f"{sheet_name}!A:Z"
                    else:
                        range_notation = "A:Z"  # –ü–µ—Ä–≤—ã–π –ª–∏—Å—Ç, –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏
                    
                    logger.info(f"[ADD_GOOGLE_SHEET_ROW] üìç Range: {range_notation}")
                    
                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
                    body = {'values': [values]}
                    
                    logger.info("[ADD_GOOGLE_SHEET_ROW] üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Google Sheets API...")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —á–µ—Ä–µ–∑ API
                    result = service.spreadsheets().values().append(
                        spreadsheetId=spreadsheet_id,
                        range=range_notation,
                        valueInputOption='RAW',
                        insertDataOption='INSERT_ROWS',
                        body=body
                    ).execute()
                    
                    logger.info("[ADD_GOOGLE_SHEET_ROW] ‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
                    updates = result.get('updates', {})
                    updated_range = updates.get('updatedRange', '')
                    updated_rows = updates.get('updatedRows', 0)
                    updated_cells = updates.get('updatedCells', 0)
                    
                    logger.info(f"[ADD_GOOGLE_SHEET_ROW] üìä Updated range: {updated_range}")
                    logger.info(f"[ADD_GOOGLE_SHEET_ROW] üìä Updated rows: {updated_rows}")
                    logger.info(f"[ADD_GOOGLE_SHEET_ROW] üìä Updated cells: {updated_cells}")
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –∏–∑ updated_range
                    # –§–æ—Ä–º–∞—Ç: "Sheet1!A10:C10" ‚Üí –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ = 10
                    row_number = None
                    if updated_range:
                        match = re.search(r'!A(\d+):', updated_range)
                        if match:
                            row_number = int(match.group(1))
                    
                    logger.info("[ADD_GOOGLE_SHEET_ROW] ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
                    logger.info(f"[ADD_GOOGLE_SHEET_ROW] ‚úÖ –£–°–ü–ï–•! –°—Ç—Ä–æ–∫–∞ {row_number} –¥–æ–±–∞–≤–ª–µ–Ω–∞")
                    logger.info("[ADD_GOOGLE_SHEET_ROW] ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
                    
                    return {
                        "success": True,
                        "message": f"–°—Ç—Ä–æ–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É{f' (—Å—Ç—Ä–æ–∫–∞ ‚Ññ{row_number})' if row_number else ''}",
                        "spreadsheet_id": spreadsheet_id,
                        "sheet_name": sheet_name or "default",
                        "row_number": row_number,
                        "values_added": values,
                        "cells_updated": updated_cells
                    }
                    
                except Exception as e:
                    error_str = str(e)
                    logger.error(f"[ADD_GOOGLE_SHEET_ROW] ‚ùå –û—à–∏–±–∫–∞: {error_str}")
                    
                    # –ü–æ–Ω—è—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
                    if "403" in error_str or "PERMISSION_DENIED" in error_str:
                        return {
                            "success": False,
                            "error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω",
                            "details": "–¢–∞–±–ª–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞—Å—à–∞—Ä–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç —Å –ø—Ä–∞–≤–∞–º–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞",
                            "instruction": "–û—Ç–∫—Ä–æ–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É ‚Üí –∫–Ω–æ–ø–∫–∞ '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–æ—Å—Ç—É–ø' ‚Üí –¥–æ–±–∞–≤—å—Ç–µ email —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å –ø—Ä–∞–≤–∞–º–∏ '–†–µ–¥–∞–∫—Ç–æ—Ä'"
                        }
                    elif "404" in error_str or "NOT_FOUND" in error_str:
                        return {
                            "success": False,
                            "error": "–¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                            "details": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å URL —Ç–∞–±–ª–∏—Ü—ã"
                        }
                    elif "INVALID_ARGUMENT" in error_str:
                        return {
                            "success": False,
                            "error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã",
                            "details": f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞: '{sheet_name}'"
                        }
                    else:
                        return {
                            "success": False,
                            "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏: {error_str}"
                        }
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ thread pool
            logger.info("[ADD_GOOGLE_SHEET_ROW] ‚è≥ –ó–∞–ø—É—Å–∫–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ...")
            result = await loop.run_in_executor(None, append_row_sync)
            
            return result
            
        except Exception as e:
            logger.error(f"[ADD_GOOGLE_SHEET_ROW] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            return {
                "success": False,
                "error": f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
            }
