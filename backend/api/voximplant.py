# backend/api/voximplant.py - Production Version 2.2

"""
Voximplant API endpoints –¥–ª—è WellcomeAI, –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–ª—è –≥–∏–±–∫–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã.
üÜï v2.1: Enhanced logging with caller_number and conversation_id tracking
üÜï v2.2: Added database persistence for conversations
"""

from fastapi import APIRouter, WebSocket, Depends, Query, HTTPException, status, Header, Body
from sqlalchemy.orm import Session
from typing import Optional, Dict, Any, List
import time
import uuid
import json
import traceback

from backend.core.logging import get_logger
from backend.core.config import settings
from backend.db.session import get_db
from backend.models.assistant import AssistantConfig
from backend.models.user import User
from backend.models.conversation import Conversation
from backend.services.user_service import UserService
from backend.functions import get_function_definitions, get_enabled_functions, normalize_function_name, execute_function
# –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets
from backend.services.google_sheets_service import GoogleSheetsService
# üÜï v2.2: –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç ConversationService –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
from backend.services.conversation_service import ConversationService

logger = get_logger(__name__)

# Create router
router = APIRouter()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ OpenAI Realtime API
def build_functions_for_openai(functions_config):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ñ—É–Ω–∫—Ü–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è OpenAI Realtime API
    """
    if not functions_config:
        return []
        
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
    all_functions_definitions = get_function_definitions()
    all_functions_dict = {normalize_function_name(f["name"]): f for f in all_functions_definitions}
    
    result_functions = []
    try:
        if isinstance(functions_config, list):
            for idx, func in enumerate(functions_config):
                if isinstance(func, dict) and "name" in func:
                    normalized_name = normalize_function_name(func["name"])
                    function_def = all_functions_dict.get(normalized_name)
                    
                    if function_def:
                        # –î–æ–±–∞–≤–ª—è–µ–º function_id –≤ parameters
                        params = function_def["parameters"].copy()
                        if "properties" not in params:
                            params["properties"] = {}
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º function_id –∫–∞–∫ –ø–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
                        params["properties"] = {
                            "function_id": {
                                "type": "string",
                                "description": "ID —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
                                "enum": [str(idx + 1)]
                            },
                            **params["properties"]
                        }
                        
                        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ function_id –≤–∫–ª—é—á–µ–Ω –≤ required
                        if "required" not in params or not params["required"]:
                            params["required"] = ["function_id"]
                        elif "function_id" not in params["required"]:
                            params["required"] = ["function_id"] + params["required"]
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ OpenAI
                        result_functions.append({
                            "type": "function",
                            "function": {
                                "name": func["name"],
                                "description": func.get("description", function_def["description"]),
                                "parameters": params
                            }
                        })
                        logger.info(f"[VOXIMPLANT] –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è {func['name']} —Å ID {idx + 1}")
        
        elif isinstance(functions_config, dict) and "enabled_functions" in functions_config:
            enabled_functions = functions_config.get("enabled_functions", [])
            for idx, name in enumerate(enabled_functions):
                normalized_name = normalize_function_name(name)
                function_def = all_functions_dict.get(normalized_name)
                
                if function_def:
                    # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∫ –≤—ã—à–µ
                    params = function_def["parameters"].copy()
                    if "properties" not in params:
                        params["properties"] = {}
                    
                    params["properties"] = {
                        "function_id": {
                            "type": "string",
                            "description": "ID —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
                            "enum": [str(idx + 1)]
                        },
                        **params["properties"]
                    }
                    
                    if "required" not in params or not params["required"]:
                        params["required"] = ["function_id"]
                    elif "function_id" not in params["required"]:
                        params["required"] = ["function_id"] + params["required"]
                    
                    result_functions.append({
                        "type": "function",
                        "function": {
                            "name": function_def["name"],
                            "description": function_def["description"],
                            "parameters": params
                        }
                    })
                    logger.info(f"[VOXIMPLANT] –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è {function_def['name']} —Å ID {idx + 1}")
    
    except Exception as e:
        logger.error(f"[VOXIMPLANT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π: {e}")
        logger.error(traceback.format_exc())
    
    return result_functions

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
@router.get("/assistants/config/{assistant_id}")
async def get_assistant_config(
    assistant_id: str,
    user_id: Optional[str] = Header(None, alias="X-User-ID"),
    db: Session = Depends(get_db)
):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ Voximplant.
    """
    logger.info(f"[VOXIMPLANT] –ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ {assistant_id}")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏–∑ –ë–î
        assistant = None
        
        if assistant_id == "demo":
            assistant = db.query(AssistantConfig).filter(AssistantConfig.is_public.is_(True)).first()
            if not assistant:
                assistant = db.query(AssistantConfig).first()
                logger.info("[VOXIMPLANT] –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è demo")
        else:
            try:
                assistant_uuid = uuid.UUID(assistant_id)
                assistant = db.query(AssistantConfig).get(assistant_uuid)
                logger.info(f"[VOXIMPLANT] –ù–∞–π–¥–µ–Ω –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ UUID: {assistant_id}")
            except ValueError:
                assistant = db.query(AssistantConfig).filter(
                    AssistantConfig.id.cast(str) == assistant_id
                ).first()
                logger.info(f"[VOXIMPLANT] –ù–∞–π–¥–µ–Ω –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É ID: {assistant_id}")
                
        if not assistant:
            logger.warning(f"[VOXIMPLANT] –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {assistant_id}")
            
            # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
            return {
                "api_key": settings.OPENAI_API_KEY,
                "model": "gpt-4o-realtime-preview",
                "prompt": "–í—ã ‚Äî —Ç–µ—Å—Ç–æ–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                "hello": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø —Ç–µ—Å—Ç–æ–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
                "voice": "alloy",
                "language": "ru",
                "temperature": 0.7,
                "functions": [],
                "log_enabled": False,
                "google_sheet_id": None,
                "assistant_id": assistant_id,
                "assistant_name": "–¢–µ—Å—Ç–æ–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç (ID –Ω–µ –Ω–∞–π–¥–µ–Ω)",
                "error": "assistant_not_found"
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏ API –∫–ª—é—á
        api_key = None
        if assistant.user_id:
            user = db.query(User).get(assistant.user_id)
            if user:
                logger.info(f"[VOXIMPLANT] –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {user.id}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–æ–≤)
                if not user.is_admin and user.email != "well96well@gmail.com":
                    try:
                        subscription_status = await UserService.check_subscription_status(db, str(user.id))
                        if not subscription_status["active"]:
                            logger.warning(f"[VOXIMPLANT] –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.id}")
                            
                            # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –≤—Å–µ —Ä–∞–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                            return {
                                "api_key": settings.OPENAI_API_KEY,
                                "model": "gpt-4o-realtime-preview",
                                "prompt": "–í—ã ‚Äî —Ç–µ—Å—Ç–æ–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ü–æ–¥–ø–∏—Å–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏—Å—Ç–µ–∫–ª–∞.",
                                "hello": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                                "voice": assistant.voice or "alloy",
                                "language": assistant.language or "ru",
                                "temperature": assistant.temperature or 0.7,
                                "functions": [],
                                "log_enabled": False,
                                "google_sheet_id": None,
                                "assistant_id": str(assistant.id),
                                "assistant_name": assistant.name,
                                "error": "subscription_expired"
                            }
                    except Exception as sub_error:
                        logger.error(f"[VOXIMPLANT] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {sub_error}")
                
                # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á OpenAI
                api_key = user.openai_api_key
                
                if api_key:
                    logger.info(f"[VOXIMPLANT] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è API –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                else:
                    logger.warning(f"[VOXIMPLANT] –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        # –ï—Å–ª–∏ API –∫–ª—é—á–∞ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ .env
        if not api_key:
            api_key = settings.OPENAI_API_KEY
            logger.info(f"[VOXIMPLANT] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è API –∫–ª—é—á –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–µ—Ä–≤–µ—Ä–∞")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ OpenAI Realtime API
        functions = build_functions_for_openai(assistant.functions)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        log_enabled = False
        google_sheet_id = None
        
        if hasattr(assistant, 'log_enabled'):
            log_enabled = assistant.log_enabled
        if hasattr(assistant, 'google_sheet_id'):
            google_sheet_id = assistant.google_sheet_id
            logger.info(f"[VOXIMPLANT] –ù–∞–π–¥–µ–Ω ID Google Sheet: {google_sheet_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        greeting_message = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?"
        if hasattr(assistant, 'greeting_message') and assistant.greeting_message:
            greeting_message = assistant.greeting_message
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è Voximplant
        config = {
            "api_key": api_key,
            "model": "gpt-4o-realtime-preview",
            "prompt": assistant.system_prompt,
            "hello": greeting_message,
            "voice": assistant.voice or "alloy",
            "language": assistant.language or "ru",
            "temperature": assistant.temperature or 0.7,
            "functions": functions,
            "log_enabled": log_enabled,
            "google_sheet_id": google_sheet_id,
            "assistant_id": str(assistant.id),
            "assistant_name": assistant.name
        }
        
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è ElevenLabs, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if hasattr(assistant, 'use_elevenlabs') and assistant.use_elevenlabs:
            config["use_elevenlabs"] = True
            config["elevenlabs_api_key"] = settings.ELEVENLABS_API_KEY
            config["elevenlabs_voice_id"] = assistant.elevenlabs_voice_id or "21m00Tcm4TlvDq8ikWAM"
        
        logger.info(f"[VOXIMPLANT] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ {assistant_id}")
        
        return config
        
    except Exception as e:
        logger.error(f"[VOXIMPLANT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {e}")
        logger.error(f"[VOXIMPLANT] –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
        
        # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
        return {
            "api_key": settings.OPENAI_API_KEY,
            "model": "gpt-4o-realtime-preview",
            "prompt": "–í—ã ‚Äî —Ç–µ—Å—Ç–æ–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.",
            "hello": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–æ —è –ø–æ–ø—Ä–æ–±—É—é –≤–∞–º –ø–æ–º–æ—á—å.",
            "voice": "alloy",
            "language": "ru",
            "temperature": 0.7,
            "functions": [],
            "log_enabled": False,
            "google_sheet_id": None,
            "assistant_id": assistant_id,
            "assistant_name": "–¢–µ—Å—Ç–æ–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç (–æ—à–∏–±–∫–∞)",
            "error": str(e)
        }

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
@router.post("/functions/execute")
async def execute_assistant_function(
    request_data: Dict[str, Any],
    db: Session = Depends(get_db)
):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏–∑ Voximplant –ø–æ ID —Ñ—É–Ω–∫—Ü–∏–∏.
    """
    try:
        function_id = request_data.get("function_id")
        arguments = request_data.get("arguments", {})
        call_data = request_data.get("call_data", {})
        
        if not function_id:
            logger.warning(f"[VOXIMPLANT] –ù–µ —É–∫–∞–∑–∞–Ω ID —Ñ—É–Ω–∫—Ü–∏–∏: {request_data}")
            return {
                "error": "–ù–µ —É–∫–∞–∑–∞–Ω ID —Ñ—É–Ω–∫—Ü–∏–∏",
                "status": "error"
            }
        
        logger.info(f"[VOXIMPLANT] –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å ID {function_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º ID –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ call_data
        assistant_id = None
        if "assistant_id" in arguments:
            assistant_id = arguments.get("assistant_id")
        elif call_data and "assistant_id" in call_data:
            assistant_id = call_data.get("assistant_id")
        
        if not assistant_id:
            logger.warning(f"[VOXIMPLANT] –ù–µ —É–∫–∞–∑–∞–Ω ID –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏: {function_id}")
            return {
                "error": "–ù–µ —É–∫–∞–∑–∞–Ω ID –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞",
                "status": "error"
            }
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        try:
            assistant_uuid = uuid.UUID(assistant_id)
            assistant = db.query(AssistantConfig).get(assistant_uuid)
        except ValueError:
            assistant = db.query(AssistantConfig).filter(
                AssistantConfig.id.cast(str) == assistant_id
            ).first()
            
        if not assistant:
            logger.warning(f"[VOXIMPLANT] –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {assistant_id}")
            return {
                "error": "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                "status": "error"
            }
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        enabled_functions = []
        if assistant.functions:
            if isinstance(assistant.functions, list):
                enabled_functions = [f.get("name") for f in assistant.functions if isinstance(f, dict) and "name" in f]
            elif isinstance(assistant.functions, dict) and "enabled_functions" in assistant.functions:
                enabled_functions = assistant.functions.get("enabled_functions", [])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å —Ñ—É–Ω–∫—Ü–∏–∏
        try:
            func_index = int(function_id) - 1
            if func_index < 0 or func_index >= len(enabled_functions):
                logger.warning(f"[VOXIMPLANT] –ò–Ω–¥–µ–∫—Å —Ñ—É–Ω–∫—Ü–∏–∏ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {function_id}")
                return {
                    "error": f"–§—É–Ω–∫—Ü–∏—è —Å ID {function_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                    "status": "error"
                }
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ –∏–Ω–¥–µ–∫—Å—É
            function_name = enabled_functions[func_index]
            normalized_name = normalize_function_name(function_name)
            
            logger.info(f"[VOXIMPLANT] –ù–∞–π–¥–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è {function_name} –¥–ª—è ID {function_id}")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            context = {
                "assistant_config": assistant,
                "client_id": call_data.get("chat_id", f"voximplant_{call_data.get('call_id', uuid.uuid4())}"),
                "db_session": db,
                "call_data": call_data
            }
            
            # –£–¥–∞–ª—è–µ–º function_id –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–∞—à –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä
            if "function_id" in arguments:
                del arguments["function_id"]
            
            logger.info(f"[VOXIMPLANT] –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é {function_name} —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: {arguments}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            result = await execute_function(
                name=normalized_name,
                arguments=arguments,
                context=context
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
            try:
                from backend.models.function_log import FunctionLog
                
                log_entry = FunctionLog(
                    user_id=assistant.user_id,
                    assistant_id=assistant.id,
                    function_name=function_name,
                    arguments=arguments,
                    result=result,
                    status="success" if "error" not in result else "error",
                    chat_id=call_data.get("chat_id"),
                    call_id=call_data.get("call_id")
                )
                
                db.add(log_entry)
                db.commit()
                
                logger.info(f"[VOXIMPLANT] –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏ {function_name} –∑–∞–ø–∏—Å–∞–Ω –≤ –ª–æ–≥")
            except Exception as log_error:
                logger.error(f"[VOXIMPLANT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏: {log_error}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            logger.info(f"[VOXIMPLANT] –§—É–Ω–∫—Ü–∏—è {function_name} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return result
            
        except Exception as e:
            logger.error(f"[VOXIMPLANT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏: {e}")
            logger.error(traceback.format_exc())
            return {
                "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏: {str(e)}",
                "status": "error"
            }
        
    except Exception as e:
        logger.error(f"[VOXIMPLANT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ —Ñ—É–Ω–∫—Ü–∏–∏: {e}")
        logger.error(traceback.format_exc())
        return {
            "error": f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}",
            "status": "error"
        }

@router.post("/webhook/transcript")
async def voximplant_transcript_webhook(
    request_data: Dict[str, Any],
    db: Session = Depends(get_db)
):
    """
    Webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –æ—Ç Voximplant.
    """
    try:
        assistant_id = request_data.get("assistant_id")
        role = request_data.get("role")
        transcript = request_data.get("transcript")
        call_id = request_data.get("call_id")
        chat_id = request_data.get("chat_id")
        timestamp = request_data.get("timestamp")
        
        logger.info(f"[VOXIMPLANT] –ü–æ–ª—É—á–µ–Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è {role} –¥–ª—è –∑–≤–æ–Ω–∫–∞ {call_id}")
        
        if not assistant_id or not role or not transcript:
            return {
                "success": False,
                "message": "Missing required parameters"
            }
        
        # –ù–∞—Ö–æ–¥–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
        conversation = None
        
        # –ò—â–µ–º –ø–æ call_id –∏–ª–∏ chat_id –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        conversations = db.query(Conversation).filter(
            Conversation.assistant_id == assistant_id
        ).order_by(Conversation.created_at.desc()).limit(10).all()
        
        for conv in conversations:
            metadata = conv.client_info or {}
            if (call_id and metadata.get("call_id") == call_id) or (chat_id and metadata.get("chat_id") == chat_id):
                conversation = conv
                break
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        if not conversation:
            try:
                assistant_uuid = uuid.UUID(assistant_id)
                assistant = db.query(AssistantConfig).get(assistant_uuid)
                
                if assistant:
                    conversation = Conversation(
                        assistant_id=assistant.id,
                        session_id=chat_id or str(uuid.uuid4()),
                        user_message="",
                        assistant_message="",
                        client_info={
                            "call_id": call_id,
                            "chat_id": chat_id,
                            "source": "voximplant",
                            "timestamp": timestamp
                        }
                    )
                    db.add(conversation)
                    db.commit()
                    db.refresh(conversation)
                    
                    logger.info(f"[VOXIMPLANT] –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: {conversation.id}")
            except Exception as e:
                logger.error(f"[VOXIMPLANT] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
        if conversation:
            if role == "user":
                # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
                if conversation.user_message:
                    conversation.user_message += f"\n{transcript}"
                else:
                    conversation.user_message = transcript
            elif role == "assistant":
                if conversation.assistant_message:
                    conversation.assistant_message += f"\n{transcript}"
                else:
                    conversation.assistant_message = transcript
                
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
            conversation.updated_at = time.time()
            
            db.commit()
            logger.info(f"[VOXIMPLANT] –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ {conversation.id}")
        
        return {
            "success": True,
            "message": "Transcript received and processed",
            "conversation_id": str(conversation.id) if conversation else None
        }
        
    except Exception as e:
        logger.error(f"[VOXIMPLANT] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
        logger.error(traceback.format_exc())
        return {
            "success": False,
            "message": f"Error processing transcript: {str(e)}"
        }

# üÜï v2.2: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î
@router.post("/log")
async def log_conversation_data(
    request_data: Dict[str, Any],
    db: Session = Depends(get_db)
):
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏–∑ Voximplant.
    üÜï v2.2: –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ò –≤ Google Sheets –ò –≤ –ë–î
    
    –§–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞:
    {
        "assistant_id": "uuid",
        "chat_id": "string",
        "call_id": "string",
        "caller_number": "string",  // –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∑–≤–æ–Ω—è—â–µ–≥–æ
        "type": "conversation",
        "data": {
            "user_message": "string",
            "assistant_message": "string",
            "function_result": "object"
        }
    }
    """
    try:
        assistant_id = request_data.get("assistant_id")
        chat_id = request_data.get("chat_id")
        call_id = request_data.get("call_id")
        caller_number = request_data.get("caller_number")
        data_type = request_data.get("type", "general")
        data = request_data.get("data", {})
        
        logger.info(f"[VOXIMPLANT-v2.2] ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
        logger.info(f"[VOXIMPLANT-v2.2] üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:")
        logger.info(f"[VOXIMPLANT-v2.2]   üìã –¢–∏–ø: {data_type}")
        logger.info(f"[VOXIMPLANT-v2.2]   üí¨ Chat ID: {chat_id}")
        logger.info(f"[VOXIMPLANT-v2.2]   üìû Call ID: {call_id}")
        logger.info(f"[VOXIMPLANT-v2.2]   üì± Caller Number: {caller_number}")
        logger.info(f"[VOXIMPLANT-v2.2] ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
        
        if not assistant_id or not (chat_id or call_id):
            logger.warning("[VOXIMPLANT-v2.2] ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            return {
                "success": False,
                "message": "Missing required parameters (assistant_id and chat_id/call_id)"
            }
        
        # –ï—Å–ª–∏ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö - —Ä–∞–∑–≥–æ–≤–æ—Ä, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –≤ Sheets –∏ –≤ –ë–î
        if data_type == "conversation":
            # –ü–æ–ª—É—á–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            try:
                assistant_uuid = uuid.UUID(assistant_id)
                assistant = db.query(AssistantConfig).get(assistant_uuid)
            except ValueError:
                assistant = db.query(AssistantConfig).filter(
                    AssistantConfig.id.cast(str) == assistant_id
                ).first()
            
            if not assistant:
                logger.error(f"[VOXIMPLANT-v2.2] ‚ùå –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {assistant_id}")
                return {
                    "success": False,
                    "message": "Assistant not found"
                }
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏–π
            user_message = data.get("user_message", "")
            assistant_message = data.get("assistant_message", "")
            function_result = data.get("function_result")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏–π
            logger.info(f"[VOXIMPLANT-v2.2] üìè –î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {len(user_message)} —Å–∏–º–≤–æ–ª–æ–≤")
            logger.info(f"[VOXIMPLANT-v2.2] üìè –î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {len(assistant_message)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            if not user_message and not assistant_message:
                logger.warning("[VOXIMPLANT-v2.2] ‚ö†Ô∏è –ü—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return {
                    "success": False,
                    "message": "Empty messages, logging skipped"
                }
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º conversation_id (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - call_id, fallback - chat_id)
            conversation_id = call_id or chat_id
            caller_phone = caller_number if caller_number else "unknown"
            
            logger.info(f"[VOXIMPLANT-v2.2] üîë –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏:")
            logger.info(f"[VOXIMPLANT-v2.2]   üÜî Conversation ID: {conversation_id}")
            logger.info(f"[VOXIMPLANT-v2.2]   üìû Caller Number: {caller_phone}")
            
            # üÜï v2.2: –°–û–•–†–ê–ù–ï–ù–ò–ï –í –ë–î —á–µ—Ä–µ–∑ ConversationService
            logger.info(f"[VOXIMPLANT-v2.2] üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î...")
            db_result = None
            try:
                db_result = await ConversationService.save_conversation(
                    db=db,
                    assistant_id=assistant_id,
                    user_message=user_message,
                    assistant_message=assistant_message,
                    session_id=conversation_id,
                    caller_number=caller_phone,
                    client_info={
                        "call_id": call_id,
                        "chat_id": chat_id,
                        "source": "voximplant"
                    },
                    audio_duration=None,  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è
                    tokens_used=0  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è
                )
                
                if db_result:
                    logger.info(f"[VOXIMPLANT-v2.2] ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: {db_result.id}")
                else:
                    logger.warning(f"[VOXIMPLANT-v2.2] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î")
                    
            except Exception as db_error:
                logger.error(f"[VOXIMPLANT-v2.2] ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {db_error}")
                logger.error(f"[VOXIMPLANT-v2.2] Traceback: {traceback.format_exc()}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ - Google Sheets –≤—Å—ë —Ä–∞–≤–Ω–æ –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –∑–∞–ø–∏—Å–∞—Ç—å
            
            # –°–û–•–†–ê–ù–ï–ù–ò–ï –í GOOGLE SHEETS (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
            sheets_result = False
            if hasattr(assistant, 'google_sheet_id') and assistant.google_sheet_id:
                log_sheet_id = assistant.google_sheet_id
                logger.info(f"[VOXIMPLANT-v2.2] üìä –ù–∞–π–¥–µ–Ω ID Google Sheet: {log_sheet_id}")
                
                try:
                    sheets_result = await GoogleSheetsService.log_conversation(
                        sheet_id=log_sheet_id,
                        user_message=user_message,
                        assistant_message=assistant_message,
                        function_result=function_result,
                        conversation_id=conversation_id,
                        caller_number=caller_phone
                    )
                    
                    if sheets_result:
                        logger.info(f"[VOXIMPLANT-v2.2] ‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ Google Sheets")
                    else:
                        logger.error(f"[VOXIMPLANT-v2.2] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets")
                        
                except Exception as sheets_error:
                    logger.error(f"[VOXIMPLANT-v2.2] ‚ùå –û—à–∏–±–∫–∞ Google Sheets: {sheets_error}")
                    logger.error(f"[VOXIMPLANT-v2.2] Traceback: {traceback.format_exc()}")
            else:
                logger.info(f"[VOXIMPLANT-v2.2] ‚ö†Ô∏è Google Sheets –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            logger.info(f"[VOXIMPLANT-v2.2] ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
            logger.info(f"[VOXIMPLANT-v2.2] üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø:")
            logger.info(f"[VOXIMPLANT-v2.2]   üíæ –ë–î: {'‚úÖ –î–ê' if db_result else '‚ùå –ù–ï–¢'}")
            logger.info(f"[VOXIMPLANT-v2.2]   üìä Sheets: {'‚úÖ –î–ê' if sheets_result else '‚ùå –ù–ï–¢'}")
            logger.info(f"[VOXIMPLANT-v2.2] ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
            
            return {
                "success": bool(db_result) or sheets_result,
                "message": "Conversation logged successfully" if (db_result or sheets_result) else "Failed to log conversation",
                "saved_to": {
                    "database": bool(db_result),
                    "google_sheets": sheets_result
                },
                "conversation_id": str(db_result.id) if db_result else conversation_id,
                "caller_number": caller_phone
            }
        
        return {
            "success": True,
            "message": "Log data received and processed"
        }
        
    except Exception as e:
        logger.error(f"[VOXIMPLANT-v2.2] ‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        logger.error(f"[VOXIMPLANT-v2.2] –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
        return {
            "success": False,
            "message": f"Error logging data: {str(e)}"
        }

# –û–±–Ω–æ–≤–ª—è–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google —Ç–∞–±–ª–∏—Ü–µ
@router.post("/assistants/{assistant_id}/verify-sheet")
async def verify_google_sheet(
    assistant_id: str,
    sheet_data: Dict[str, Any],
    db: Session = Depends(get_db)
):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    üÜï v2.1: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è 6 –∫–æ–ª–æ–Ω–æ–∫ –≤–∫–ª—é—á–∞—è Caller Number
    """
    try:
        sheet_id = sheet_data.get("sheet_id")
        if not sheet_id:
            return {"success": False, "message": "ID —Ç–∞–±–ª–∏—Ü—ã –Ω–µ —É–∫–∞–∑–∞–Ω"}
        
        logger.info(f"[SHEETS-v2.1] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ç–∞–±–ª–∏—Ü–µ: {sheet_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ
        verify_result = await GoogleSheetsService.verify_sheet_access(sheet_id)
        
        if verify_result["success"]:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã (v2.1 - 6 –∫–æ–ª–æ–Ω–æ–∫)
            setup_result = await GoogleSheetsService.setup_sheet(sheet_id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º google_sheet_id
            if assistant_id != "new":
                try:
                    assistant_uuid = uuid.UUID(assistant_id)
                    assistant = db.query(AssistantConfig).get(assistant_uuid)
                    
                    if assistant:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º sheet_id –≤ google_sheet_id
                        assistant.google_sheet_id = sheet_id
                        assistant.log_enabled = True
                        db.commit()
                        logger.info(f"[SHEETS-v2.1] ‚úÖ ID —Ç–∞–±–ª–∏—Ü—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ {assistant_id}")
                except Exception as e:
                    logger.error(f"[SHEETS-v2.1] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ ID —Ç–∞–±–ª–∏—Ü—ã: {str(e)}")
                    
            return {
                "success": True,
                "message": "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ (v2.1 - 6 –∫–æ–ª–æ–Ω–æ–∫)",
                "sheet_title": verify_result.get("title"),
                "columns": ["Timestamp", "User", "Assistant", "Function Result", "Conversation ID", "Caller Number"]
            }
        else:
            return verify_result
            
    except Exception as e:
        logger.error(f"[SHEETS-v2.1] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü—ã: {str(e)}")
        logger.error(traceback.format_exc())
        return {
            "success": False,
            "message": f"–û—à–∏–±–∫–∞: {str(e)}"
        }

# –ù–û–í–´–ô –≠–ù–î–ü–û–ò–ù–¢: –ó–∞–ø—É—Å–∫ –∏—Å—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤
@router.post("/start-outbound-call")
async def start_outbound_call(
    request_data: Dict[str, Any] = Body(...)
):
    """
    –ó–∞–ø—É—Å–∫ –∏—Å—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞ —á–µ—Ä–µ–∑ Voximplant API.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç credentials –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–≤–æ–Ω–∫–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞.
    """
    try:
        import httpx
        
        # –ü–æ–ª—É—á–∞–µ–º credentials –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        account_id = request_data.get("account_id")
        api_key = request_data.get("api_key")
        rule_id = request_data.get("rule_id")
        script_custom_data = request_data.get("script_custom_data")
        
        if not account_id or not api_key:
            logger.warning("[VOXIMPLANT] –ù–µ —É–∫–∞–∑–∞–Ω—ã Voximplant credentials")
            raise HTTPException(
                status_code=400, 
                detail="–ù–µ —É–∫–∞–∑–∞–Ω—ã Voximplant credentials (account_id –∏ api_key)"
            )
        
        if not rule_id or not script_custom_data:
            logger.warning("[VOXIMPLANT] –ù–µ —É–∫–∞–∑–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–≤–æ–Ω–∫–∞")
            raise HTTPException(
                status_code=400, 
                detail="–ù–µ —É–∫–∞–∑–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (rule_id –∏ script_custom_data)"
            )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ Voximplant API
        voximplant_url = "https://api.voximplant.com/platform_api/StartScenarios"
        
        params = {
            "account_id": account_id,
            "api_key": api_key,
            "rule_id": rule_id,
            "script_custom_data": script_custom_data
        }
        
        logger.info(f"[VOXIMPLANT] –ó–∞–ø—É—Å–∫ –∏—Å—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞, rule_id: {rule_id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Voximplant API
        async with httpx.AsyncClient() as client:
            response = await client.post(
                voximplant_url,
                data=params,
                timeout=30.0
            )
            
            result = response.json()
            
            if result.get("result"):
                logger.info(f"[VOXIMPLANT] –ò—Å—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω: {result.get('call_session_history_id')}")
                return {
                    "success": True,
                    "message": "–ó–≤–æ–Ω–æ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω",
                    "call_session_history_id": result.get("call_session_history_id"),
                    "media_session_access_url": result.get("media_session_access_url")
                }
            else:
                error_msg = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                if result.get("error"):
                    error_msg = result["error"].get("msg", error_msg)
                
                logger.error(f"[VOXIMPLANT] –û—à–∏–±–∫–∞ Voximplant API: {error_msg}")
                return {
                    "success": False,
                    "message": f"–û—à–∏–±–∫–∞ Voximplant API: {error_msg}"
                }
                
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"[VOXIMPLANT] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏—Å—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞: {e}")
        logger.error(traceback.format_exc())
        raise HTTPException(status_code=500, detail=str(e))
