"""
–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô Subscription service for WellcomeAI application.
–£–ë–†–ê–ù–´ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã amount –∏ payment_id –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ log_subscription_event
"""

from fastapi import HTTPException, status
from sqlalchemy.orm import Session
from sqlalchemy.exc import IntegrityError
from typing import List, Optional, Dict, Any
from datetime import datetime, timedelta, timezone
import uuid

from backend.core.logging import get_logger
from backend.models.user import User
from backend.models.subscription import SubscriptionPlan, SubscriptionLog

logger = get_logger(__name__)

class SubscriptionService:
    """Service for subscription operations - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    
    @staticmethod
    async def activate_trial(db: Session, user_id: str, trial_days: int = 3) -> Optional[User]:
        """
        ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç—Ä–∏–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –ë–ï–ó amount –∏ payment_id –≤ –ª–æ–≥–∞—Ö
        """
        from backend.services.user_service import UserService
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç user_id
            user_uuid = None
            try:
                if isinstance(user_id, str):
                    user_uuid = uuid.UUID(user_id)
                    user_id = user_uuid
            except ValueError:
                logger.error(f"Invalid user_id format: {user_id}")
                
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = None
            try:
                user = await UserService.get_user_by_id(db, user_id)
            except HTTPException as he:
                logger.error(f"Error getting user: {str(he)}")
                user = db.query(User).get(user_id)
                
            if not user:
                logger.error(f"User not found: {user_id}")
                return None
            
            # ‚úÖ –ù–ï –ü–ï–†–ï–ó–ê–ü–ò–°–´–í–ê–ï–ú –¥–∞—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ —É–∂–µ –µ—Å—Ç—å!
            if user.subscription_start_date and user.subscription_end_date:
                logger.info(f"User {user_id} already has subscription dates (start={user.subscription_start_date}, end={user.subscription_end_date}), not overwriting")
                
                # –¢–æ–ª—å–∫–æ —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
                if not user.subscription_plan_id:
                    trial_plan = db.query(SubscriptionPlan).filter(SubscriptionPlan.code == "free").first()
                    if trial_plan:
                        user.subscription_plan_id = trial_plan.id
                        db.commit()
                        logger.info(f"Set trial plan for user {user_id} without changing dates")
                
                return user
            
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ—Ç
            logger.info(f"üöÄ Setting up trial for user {user_id} - no existing subscription dates found")
            
            # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω –∏–∑ —Ç–∞–±–ª–∏—Ü—ã subscription_plans
            trial_plan = db.query(SubscriptionPlan).filter(SubscriptionPlan.code == "free").first()
            
            # –ï—Å–ª–∏ –ø–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
            if not trial_plan:
                logger.warning("Trial plan (code='free') not found, creating one")
                trial_plan = SubscriptionPlan(
                    code="free",
                    name="Free Trial",
                    price=0,
                    max_assistants=1,
                    description="–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Å –±–∞–∑–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏",
                    is_active=True
                )
                db.add(trial_plan)
                db.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –±–µ–∑ –∫–æ–º–º–∏—Ç–∞
                logger.info(f"‚úÖ Created trial plan: {trial_plan.id}")
            
            # Set trial period –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –¥–∞—Ç –Ω–µ—Ç
            now = datetime.now(timezone.utc)
            user.is_trial = True
            user.subscription_start_date = now
            user.subscription_end_date = now + timedelta(days=trial_days)
            user.subscription_plan_id = trial_plan.id
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            logger.info(f"üìÖ Setting trial: start={now}, end={user.subscription_end_date}, plan_id={trial_plan.id}")
            
            db.commit()
            db.refresh(user)
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω—ã amount –∏ payment_id –∏–∑ –≤—ã–∑–æ–≤–∞
            await SubscriptionService.log_subscription_event(
                db=db,
                user_id=str(user.id),
                action="trial_activate",
                plan_id=str(trial_plan.id),
                plan_code="free",
                details=f"Trial activated for {trial_days} days until {user.subscription_end_date.strftime('%Y-%m-%d')}"
            )
            
            # ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ç—Ä–∏–∞–ª–∞
            try:
                from backend.services.notification_service import NotificationService
                await NotificationService.send_subscription_started_notice(
                    user=user,
                    plan_name=trial_plan.name,
                    end_date=user.subscription_end_date,
                    is_trial=True
                )
                logger.info(f"üìß Trial start notification sent to {user.email}")
            except Exception as notif_error:
                logger.error(f"‚ö†Ô∏è Failed to send trial notification: {str(notif_error)}")
            
            logger.info(f"‚úÖ Trial activated for user {user_id} until {user.subscription_end_date}")
            return user
            
        except Exception as e:
            db.rollback()
            logger.error(f"‚ùå Error activating trial: {str(e)}")
            # –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            return None
    
    @staticmethod
    async def check_expired_subscriptions(db: Session) -> int:
        """
        ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –ë–ï–ó amount –∏ payment_id –≤ –ª–æ–≥–∞—Ö
        """
        try:
            now = datetime.now(timezone.utc)
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–∏–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
            potential_expired = db.query(User).filter(
                User.subscription_end_date.isnot(None),
                User.is_trial.is_(True)  # –ü–æ–∫–∞ —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å —Ç—Ä–∏–∞–ª—å–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
            ).all()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å —É—á–µ—Ç–æ–º —Ç–∞–π–º–∑–æ–Ω
            expired_users = []
            for user in potential_expired:
                end_date = user.subscription_end_date
                if end_date.tzinfo is None:
                    end_date = end_date.replace(tzinfo=timezone.utc)
                    
                if end_date < now:
                    expired_users.append(user)
            
            updated_count = 0
            
            for user in expired_users:
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –ù–ï –¢–†–û–ì–ê–ï–ú –¥–∞—Ç—ã!
                user.is_trial = False
                # –ù–ï –û–ë–ù–£–õ–Ø–ï–ú subscription_end_date - –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏!
                
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω—ã amount –∏ payment_id –∏–∑ –≤—ã–∑–æ–≤–∞
                await SubscriptionService.log_subscription_event(
                    db=db,
                    user_id=str(user.id),
                    action="trial_expired",
                    plan_id=str(user.subscription_plan_id) if user.subscription_plan_id else None,
                    plan_code="free",
                    details=f"Trial period expired on {user.subscription_end_date.strftime('%Y-%m-%d')}"
                )
                
                # ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏
                try:
                    from backend.services.notification_service import NotificationService
                    await NotificationService.send_subscription_expired_notice(user)
                    logger.info(f"üìß Expiration notification sent to {user.email}")
                except Exception as notif_error:
                    logger.error(f"‚ö†Ô∏è Failed to send expiration notification: {notif_error}")
                
                logger.info(f"‚è∞ Trial period expired for user {user.id}, email: {user.email}")
                updated_count += 1
            
            if updated_count > 0:
                db.commit()
                logger.info(f"‚úÖ Updated {updated_count} expired subscriptions")
                
            return updated_count
                
        except Exception as e:
            db.rollback()
            logger.error(f"‚ùå Error checking expired subscriptions: {str(e)}")
            return 0
    
    @staticmethod
    async def log_subscription_event(
        db: Session, 
        user_id: str, 
        action: str, 
        plan_id: Optional[str] = None, 
        plan_code: Optional[str] = None, 
        details: Optional[str] = None
    ) -> Optional[SubscriptionLog]:
        """
        ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ë–ï–ó –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ amount –∏ payment_id
        """
        try:
            log_entry = SubscriptionLog(
                user_id=user_id,
                action=action,
                plan_id=plan_id,
                plan_code=plan_code,
                details=details,
                created_at=datetime.now(timezone.utc)
            )
            
            db.add(log_entry)
            db.commit()
            db.refresh(log_entry)
            
            logger.info(f"üìù Subscription event logged: {action} for user {user_id} (log_id: {log_entry.id})")
            return log_entry
            
        except Exception as e:
            db.rollback()
            logger.error(f"‚ùå Error logging subscription event: {str(e)}")
            return None
    
    @staticmethod
    async def get_subscription_logs(db: Session, user_id: str, limit: int = 50) -> List[Dict[str, Any]]:
        """
        ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            logs = db.query(SubscriptionLog).filter(
                SubscriptionLog.user_id == user_id
            ).order_by(SubscriptionLog.created_at.desc()).limit(limit).all()
            
            result = []
            for log in logs:
                result.append({
                    "id": str(log.id),
                    "user_id": str(log.user_id),
                    "action": log.action,
                    "plan_id": str(log.plan_id) if log.plan_id else None,
                    "plan_code": log.plan_code,
                    "details": log.details,
                    "created_at": log.created_at
                })
                
            logger.info(f"üìã Retrieved {len(result)} subscription logs for user {user_id}")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå Error getting subscription logs: {str(e)}")
            return []
    
    @staticmethod
    async def get_upcoming_expirations(db: Session, days_ahead: int = 3) -> List[User]:
        """
        ‚úÖ –ù–û–í–ê–Ø –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        """
        try:
            now = datetime.now(timezone.utc)
            deadline = now + timedelta(days=days_ahead)
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏
            expiring_users = db.query(User).filter(
                User.subscription_end_date.isnot(None),
                User.subscription_end_date > now,
                User.subscription_end_date <= deadline,
                User.is_active.is_(True)
            ).all()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å —É—á–µ—Ç–æ–º —Ç–∞–π–º–∑–æ–Ω
            filtered_users = []
            for user in expiring_users:
                end_date = user.subscription_end_date
                if end_date.tzinfo is None:
                    end_date = end_date.replace(tzinfo=timezone.utc)
                
                if now < end_date <= deadline:
                    filtered_users.append(user)
            
            logger.info(f"üìÖ Found {len(filtered_users)} users with subscriptions expiring in {days_ahead} days")
            return filtered_users
            
        except Exception as e:
            logger.error(f"‚ùå Error getting upcoming expirations: {str(e)}")
            return []
    
    @staticmethod
    async def send_expiration_reminders(db: Session) -> int:
        """
        ‚úÖ –ù–û–í–ê–Ø –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏
        """
        try:
            # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 3 –¥–Ω—è
            users_3_days = await SubscriptionService.get_upcoming_expirations(db, 3)
            
            # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 1 –¥–µ–Ω—å
            users_1_day = await SubscriptionService.get_upcoming_expirations(db, 1)
            
            sent_count = 0
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            try:
                from backend.services.notification_service import NotificationService
                
                for user in users_3_days:
                    try:
                        await NotificationService.send_subscription_expiring_soon_notice(user, days_left=3)
                        logger.info(f"üìß 3-day reminder sent to {user.email}")
                        sent_count += 1
                    except Exception as e:
                        logger.error(f"‚ö†Ô∏è Failed to send 3-day reminder to {user.email}: {e}")
                
                for user in users_1_day:
                    try:
                        await NotificationService.send_subscription_expiring_soon_notice(user, days_left=1)
                        logger.info(f"üìß 1-day reminder sent to {user.email}")
                        sent_count += 1
                    except Exception as e:
                        logger.error(f"‚ö†Ô∏è Failed to send 1-day reminder to {user.email}: {e}")
                        
            except ImportError:
                logger.warning("‚ö†Ô∏è NotificationService not available, skipping reminders")
            
            logger.info(f"‚úÖ Sent {sent_count} expiration reminders")
            return sent_count
            
        except Exception as e:
            logger.error(f"‚ùå Error sending expiration reminders: {str(e)}")
            return 0
