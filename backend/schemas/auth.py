"""
Authentication schemas for WellcomeAI application.
Defines schemas for authentication-related requests and responses with partner referral support.
"""

from pydantic import BaseModel, Field, EmailStr, validator
from typing import Optional, Dict, Any
from datetime import datetime

class TokenData(BaseModel):
    """Schema for JWT token data"""
    sub: str
    exp: int

class Token(BaseModel):
    """Schema for authentication token response"""
    token: str
    token_type: str = "bearer"

class LoginRequest(BaseModel):
    """Schema for user login request"""
    email: EmailStr = Field(..., description="User email")
    password: str = Field(..., min_length=8, description="User password")

    class Config:
        schema_extra = {
            "example": {
                "email": "user@example.com",
                "password": "password123"
            }
        }

class RegisterRequest(BaseModel):
    """
    Schema for user registration request with partner referral support
    """
    email: EmailStr = Field(..., description="User email")
    password: str = Field(..., min_length=8, description="User password")
    first_name: Optional[str] = Field(None, max_length=50, description="User first name")
    last_name: Optional[str] = Field(None, max_length=50, description="User last name")
    company_name: Optional[str] = Field(None, max_length=100, description="Company name")
    
    # üÜï –ü–ê–†–¢–ù–ï–†–°–ö–ò–ï –ü–û–õ–Ø
    referral_code: Optional[str] = Field(
        None, 
        max_length=10,
        description="Referral code from partner (usually from UTM campaign)"
    )
    utm_data: Optional[Dict[str, str]] = Field(
        None,
        description="UTM tracking data from referral link"
    )

    @validator('password')
    def password_complexity(cls, v):
        """Validate password complexity"""
        if len(v) < 8:
            raise ValueError('Password must be at least 8 characters long')
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è
        if not any(c.isdigit() for c in v):
            raise ValueError('Password must contain at least one digit')
        
        if not any(c.isalpha() for c in v):
            raise ValueError('Password must contain at least one letter')
            
        return v

    @validator('email')
    def email_format(cls, v):
        """Additional email validation"""
        email_str = str(v).lower().strip()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–æ–º–µ–Ω—ã (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
        blocked_domains = ['tempmail.com', '10minutemail.com']
        domain = email_str.split('@')[-1] if '@' in email_str else ''
        
        if domain in blocked_domains:
            raise ValueError('This email domain is not allowed')
            
        return email_str

    @validator('referral_code')
    def referral_code_format(cls, v):
        """Validate referral code format"""
        if v is None:
            return v
            
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
        code = str(v).upper().strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç: 2 –±—É–∫–≤—ã + 6 —Ü–∏—Ñ—Ä (AB123456)
        if len(code) != 8:
            raise ValueError('Referral code must be 8 characters long')
            
        if not (code[:2].isalpha() and code[2:].isdigit()):
            raise ValueError('Referral code must be in format: 2 letters + 6 digits (e.g., AB123456)')
            
        return code

    @validator('utm_data')
    def utm_data_format(cls, v):
        """Validate UTM data format"""
        if v is None:
            return v
            
        if not isinstance(v, dict):
            raise ValueError('UTM data must be a dictionary')
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–µ UTM –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        allowed_utm_keys = {
            'utm_source', 'utm_medium', 'utm_campaign', 
            'utm_content', 'utm_term'
        }
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∫–ª—é—á–∏
        filtered_utm = {
            k: str(v).strip() for k, v in v.items() 
            if k in allowed_utm_keys and v
        }
        
        return filtered_utm if filtered_utm else None

    class Config:
        schema_extra = {
            "example": {
                "email": "user@example.com",
                "password": "password123",
                "first_name": "John",
                "last_name": "Doe",
                "company_name": "ACME Inc.",
                "referral_code": "AB123456",
                "utm_data": {
                    "utm_source": "partner",
                    "utm_medium": "referral",
                    "utm_campaign": "AB123456",
                    "utm_content": "registration"
                }
            }
        }

class PasswordResetRequest(BaseModel):
    """Schema for password reset request"""
    email: EmailStr = Field(..., description="User email")

    class Config:
        schema_extra = {
            "example": {
                "email": "user@example.com"
            }
        }

class PasswordResetConfirm(BaseModel):
    """Schema for password reset confirmation"""
    token: str = Field(..., description="Password reset token")
    new_password: str = Field(..., min_length=8, description="New password")

    @validator('new_password')
    def password_complexity(cls, v):
        """Validate password complexity"""
        if len(v) < 8:
            raise ValueError('Password must be at least 8 characters long')
            
        if not any(c.isdigit() for c in v):
            raise ValueError('Password must contain at least one digit')
        
        if not any(c.isalpha() for c in v):
            raise ValueError('Password must contain at least one letter')
            
        return v

    class Config:
        schema_extra = {
            "example": {
                "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                "new_password": "newpassword123"
            }
        }

class AuthResponse(BaseModel):
    """Schema for general authentication response"""
    success: bool = Field(..., description="Success status")
    message: str = Field(..., description="Response message")
    token: Optional[str] = Field(None, description="JWT access token")
    token_type: Optional[str] = Field("bearer", description="Token type")
    user: Optional[Dict[str, Any]] = Field(None, description="User information")
    
    # üÜï –ü–ê–†–¢–ù–ï–†–°–ö–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –í –û–¢–í–ï–¢–ï
    referral_info: Optional[Dict[str, Any]] = Field(
        None, 
        description="Information about referral if user was referred"
    )
    partner_program: Optional[Dict[str, Any]] = Field(
        None,
        description="Partner program information and opportunities"
    )

    class Config:
        schema_extra = {
            "example": {
                "success": True,
                "message": "Registration successful",
                "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                "token_type": "bearer",
                "user": {
                    "id": "123e4567-e89b-12d3-a456-426614174000",
                    "email": "user@example.com",
                    "first_name": "John",
                    "last_name": "Doe",
                    "subscription_plan": "free",
                    "is_trial": True
                },
                "referral_info": {
                    "message": "üéâ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –ø–æ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π —Å—Å—ã–ª–∫–µ!",
                    "referral_code": "AB123456",
                    "partner_name": "–ü–∞—Ä—Ç–Ω–µ—Ä",
                    "commission_rate": 30.0
                },
                "partner_program": {
                    "is_referred": True,
                    "show_welcome_bonus": True,
                    "referrer_gets_commission": True,
                    "commission_rate": 30.0
                }
            }
        }

class LoginResponse(AuthResponse):
    """Schema for login response with additional user details"""
    user: Optional[Dict[str, Any]] = Field(None, description="Extended user information")

    class Config:
        schema_extra = {
            "example": {
                "success": True,
                "message": "Login successful",
                "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                "token_type": "bearer",
                "user": {
                    "id": "123e4567-e89b-12d3-a456-426614174000",
                    "email": "user@example.com",
                    "first_name": "John",
                    "last_name": "Doe",
                    "subscription_plan": "start",
                    "is_trial": False,
                    "is_admin": False,
                    "last_login": "2024-01-20T10:30:00Z",
                    "subscription_status": {
                        "active": True,
                        "days_left": 25,
                        "max_assistants": 3
                    },
                    "partner_info": {
                        "is_partner": True,
                        "referral_code": "AB123456",
                        "total_referrals": 5,
                        "total_earnings": 1500.00
                    }
                }
            }
        }

# üÜï –ù–û–í–´–ï –°–•–ï–ú–´ –î–õ–Ø –ü–ê–†–¢–ù–ï–†–°–ö–û–ô –°–ò–°–¢–ï–ú–´

class ReferralValidationRequest(BaseModel):
    """Schema for validating referral code"""
    referral_code: str = Field(..., max_length=10, description="Referral code to validate")

    @validator('referral_code')
    def referral_code_format(cls, v):
        """Validate referral code format"""
        code = str(v).upper().strip()
        
        if len(code) != 8:
            raise ValueError('Referral code must be 8 characters long')
            
        if not (code[:2].isalpha() and code[2:].isdigit()):
            raise ValueError('Referral code must be in format: 2 letters + 6 digits')
            
        return code

class ReferralValidationResponse(BaseModel):
    """Schema for referral code validation response"""
    valid: bool = Field(..., description="Whether the referral code is valid")
    referral_code: str = Field(..., description="The validated referral code")
    partner_info: Optional[Dict[str, Any]] = Field(None, description="Partner information if valid")
    message: str = Field(..., description="Validation message")

    class Config:
        schema_extra = {
            "example": {
                "valid": True,
                "referral_code": "AB123456",
                "partner_info": {
                    "partner_name": "John Doe",
                    "commission_rate": 30.0,
                    "total_referrals": 10
                },
                "message": "Valid referral code from active partner"
            }
        }

class UTMTrackingData(BaseModel):
    """Schema for UTM tracking data"""
    utm_source: Optional[str] = Field(None, max_length=50, description="UTM source")
    utm_medium: Optional[str] = Field(None, max_length=50, description="UTM medium")
    utm_campaign: Optional[str] = Field(None, max_length=50, description="UTM campaign")
    utm_content: Optional[str] = Field(None, max_length=100, description="UTM content")
    utm_term: Optional[str] = Field(None, max_length=50, description="UTM term")

    @validator('*', pre=True)
    def clean_utm_values(cls, v):
        """Clean and validate UTM values"""
        if v is None:
            return v
        return str(v).strip() if str(v).strip() else None

    class Config:
        schema_extra = {
            "example": {
                "utm_source": "partner",
                "utm_medium": "referral",
                "utm_campaign": "AB123456",
                "utm_content": "registration",
                "utm_term": "signup"
            }
        }

class PasswordChangeRequest(BaseModel):
    """Schema for password change request"""
    current_password: str = Field(..., description="Current password")
    new_password: str = Field(..., min_length=8, description="New password")

    @validator('new_password')
    def password_complexity(cls, v):
        """Validate new password complexity"""
        if len(v) < 8:
            raise ValueError('Password must be at least 8 characters long')
            
        if not any(c.isdigit() for c in v):
            raise ValueError('Password must contain at least one digit')
        
        if not any(c.isalpha() for c in v):
            raise ValueError('Password must contain at least one letter')
            
        return v

    class Config:
        schema_extra = {
            "example": {
                "current_password": "oldpassword123",
                "new_password": "newpassword456"
            }
        }

class PasswordChangeResponse(BaseModel):
    """Schema for password change response"""
    success: bool = Field(..., description="Success status")
    message: str = Field(..., description="Response message")

    class Config:
        schema_extra = {
            "example": {
                "success": True,
                "message": "Password changed successfully"
            }
        }

# –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Å—Ö–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
__all__ = [
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ö–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    "TokenData",
    "Token", 
    "LoginRequest",
    "RegisterRequest",
    "AuthResponse",
    "LoginResponse",
    
    # –°—Ö–µ–º—ã —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
    "PasswordResetRequest",
    "PasswordResetConfirm",
    "PasswordChangeRequest", 
    "PasswordChangeResponse",
    
    # –ù–æ–≤—ã–µ —Å—Ö–µ–º—ã –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã
    "ReferralValidationRequest",
    "ReferralValidationResponse",
    "UTMTrackingData"
]
