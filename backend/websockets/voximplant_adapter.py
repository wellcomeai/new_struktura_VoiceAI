# backend/websockets/voximplant_adapter.py - v2.1 —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞

import asyncio
import json
import uuid
import base64
import time
import struct
from typing import Dict, Optional, Any
from fastapi import WebSocket, WebSocketDisconnect
from sqlalchemy.orm import Session

from backend.core.logging import get_logger
from backend.models.assistant import AssistantConfig
from backend.models.conversation import Conversation
from backend.models.user import User
from backend.utils.audio_utils import base64_to_audio_buffer, audio_buffer_to_base64
from backend.services.user_service import UserService
from backend.services.google_sheets_service import GoogleSheetsService  # üÜï –î–û–ë–ê–í–õ–ï–ù–û

logger = get_logger(__name__)

class MockWebSocket:
    """
    –ú–æ–∫ WebSocket –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Å–≤—è–∑–∏ –º–µ–∂–¥—É Voximplant –∞–¥–∞–ø—Ç–µ—Ä–æ–º 
    –∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    """
    def __init__(self, partner=None):
        self.partner = partner
        self.message_queue = asyncio.Queue()
        self.is_closed = False
        self.client_state = type('ClientState', (), {'CONNECTED': 1})()
        
    async def accept(self):
        """–ò–º–∏—Ç–∏—Ä—É–µ—Ç –ø—Ä–∏–Ω—è—Ç–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        pass
        
    async def send_json(self, data: dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç JSON —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—É"""
        if not self.is_closed and self.partner:
            await self.partner.message_queue.put({"type": "json", "data": data})
            
    async def send_bytes(self, data: bytes):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –±–∞–π—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—Ç–Ω–µ—Ä—É"""
        if not self.is_closed and self.partner:
            await self.partner.message_queue.put({"type": "bytes", "data": data})
            
    async def send_text(self, data: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—Ç–Ω–µ—Ä—É"""
        if not self.is_closed and self.partner:
            await self.partner.message_queue.put({"type": "text", "data": data})
            
    async def receive(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
        if self.is_closed:
            raise WebSocketDisconnect()
        
        try:
            message = await asyncio.wait_for(self.message_queue.get(), timeout=0.1)
            if message["type"] == "json":
                return {"text": json.dumps(message["data"])}
            elif message["type"] == "bytes":
                return {"bytes": message["data"]}
            else:
                return {"text": message["data"]}
        except asyncio.TimeoutError:
            await asyncio.sleep(0.01)
            return await self.receive()
                    
    async def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"""
        self.is_closed = True
        if self.partner:
            self.partner.is_closed = True

class VoximplantAdapter:
    """
    –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Voximplant —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º v2.1
    –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç PCM16 –∞—É–¥–∏–æ –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
    """
    
    def __init__(self, voximplant_ws: WebSocket, assistant_id: str, db: Session):
        self.voximplant_ws = voximplant_ws
        self.assistant_id = assistant_id
        self.db = db
        self.client_id = str(uuid.uuid4())
        self.is_connected = False
        self.assistant_ws = None
        self.server_ws = None
        
        # üÜï v2.1: Caller information
        self.caller_number = "unknown"
        self.call_id = "unknown"
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è PCM16
        self.audio_buffer = bytearray()
        self.last_audio_time = time.time()
        self.audio_chunk_size = 1280  # 40–º—Å –ø—Ä–∏ 16kHz, 16bit mono = 1280 –±–∞–π—Ç
        self.sample_rate = 16000  # 16kHz –∫–∞–∫ –æ–∂–∏–¥–∞–µ—Ç OpenAI
        self.is_assistant_speaking = False
        
        # üÜï v2.1: –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.user_transcript = ""
        self.assistant_transcript = ""
        self.function_result = None
        
        # –ó–∞–¥–∞—á–∏ –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        self.background_tasks = []
        
        logger.info(f"[VOXIMPLANT-v2.1] –°–æ–∑–¥–∞–Ω –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è assistant_id={assistant_id}, client_id={self.client_id}")
        logger.info(f"[VOXIMPLANT-v2.1] –ê—É–¥–∏–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: PCM16, {self.sample_rate}Hz, chunk_size={self.audio_chunk_size}")

    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–¥–∞–ø—Ç–µ—Ä –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        try:
            await self.voximplant_ws.accept()
            self.is_connected = True
            logger.info(f"[VOXIMPLANT-v2.1] WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –æ—Ç Voximplant")
            
            # –°–æ–∑–¥–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            await self.create_internal_connection()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            await self.send_to_voximplant({
                "type": "connection_status",
                "status": "connected",
                "message": "Connection established"
            })
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Voximplant
            await self.handle_voximplant_messages()
            
        except Exception as e:
            logger.error(f"[VOXIMPLANT-v2.1] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–¥–∞–ø—Ç–µ—Ä–∞: {e}")
            await self.cleanup()

    async def create_internal_connection(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—É WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Å–≤—è–∑–∏
            self.server_ws, self.assistant_ws = self.create_websocket_pair()
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
            from backend.websockets.handler_realtime_new import handle_websocket_connection_new
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
            assistant_task = asyncio.create_task(
                handle_websocket_connection_new(self.server_ws, self.assistant_id, self.db)
            )
            self.background_tasks.append(assistant_task)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            response_task = asyncio.create_task(self.handle_assistant_responses())
            self.background_tasks.append(response_task)
            
            logger.info(f"[VOXIMPLANT-v2.1] –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"[VOXIMPLANT-v2.1] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            raise

    def create_websocket_pair(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞—Ä—É —Å–≤—è–∑–∞–Ω–Ω—ã—Ö WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Å–≤—è–∑–∏"""
        server_ws = MockWebSocket()
        client_ws = MockWebSocket(server_ws)
        server_ws.partner = client_ws
        
        return server_ws, client_ws

    async def handle_voximplant_messages(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Voximplant"""
        try:
            while self.is_connected:
                message = await self.voximplant_ws.receive()
                
                if "text" in message:
                    try:
                        data = json.loads(message["text"])
                        await self.handle_text_message(data)
                    except json.JSONDecodeError:
                        logger.warning(f"[VOXIMPLANT-v2.1] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON: {message['text'][:100]}")
                elif "bytes" in message:
                    await self.handle_audio_message(message["bytes"])
                    
        except WebSocketDisconnect:
            logger.info(f"[VOXIMPLANT-v2.1] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
        except Exception as e:
            logger.error(f"[VOXIMPLANT-v2.1] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        finally:
            await self.cleanup()

    async def handle_text_message(self, data: dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Voximplant"""
        msg_type = data.get("type", "")
        
        if msg_type:
            logger.info(f"[VOXIMPLANT-v2.1] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {msg_type}")
        else:
            logger.warning(f"[VOXIMPLANT-v2.1] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–∏–ø–∞: {data}")
            return
        
        if msg_type == "call_started":
            # üÜï v2.1: –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ call_id
            self.caller_number = data.get("caller_number", "unknown")
            self.call_id = data.get("call_id", "unknown")
            
            logger.info(f"[VOXIMPLANT-v2.1] –ó–≤–æ–Ω–æ–∫ –Ω–∞—á–∞—Ç: caller={self.caller_number}, call_id={self.call_id}")
            logger.info(f"[VOXIMPLANT-v2.1] üìû –°–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {self.caller_number}")
            
        elif msg_type == "audio_ready":
            audio_format = data.get("format", "pcm16")
            sample_rate = data.get("sample_rate", 16000)
            channels = data.get("channels", 1)
            
            logger.info(f"[VOXIMPLANT-v2.1] –ê—É–¥–∏–æ –≥–æ—Ç–æ–≤–æ: {audio_format}, {sample_rate}Hz, {channels} –∫–∞–Ω–∞–ª(–æ–≤)")
            
        elif msg_type == "call_ended":
            logger.info(f"[VOXIMPLANT-v2.1] –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: {self.call_id}")
            await self.cleanup()
            
        elif msg_type == "interruption.manual":
            # –†—É—á–Ω–æ–µ –ø–µ—Ä–µ–±–∏–≤–∞–Ω–∏–µ
            await self.send_to_assistant({
                "type": "interruption.manual",
                "event_id": f"voximplant_interrupt_{int(time.time() * 1000)}"
            })
            
        elif msg_type == "microphone.state":
            mic_enabled = data.get("enabled", True)
            logger.info(f"[VOXIMPLANT-v2.1] –ú–∏–∫—Ä–æ—Ñ–æ–Ω: {'–≤–∫–ª—é—á–µ–Ω' if mic_enabled else '–≤—ã–∫–ª—é—á–µ–Ω'}")

    async def handle_audio_message(self, audio_data: bytes):
        """–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ PCM16 –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Voximplant"""
        try:
            # Voximplant –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç PCM16 data —Å —á–∞—Å—Ç–æ—Ç–æ–π 16kHz
            self.audio_buffer.extend(audio_data)
            self.last_audio_time = time.time()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ —á–∞–Ω–∫–∞–º–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è 16kHz PCM16
            while len(self.audio_buffer) >= self.audio_chunk_size:
                chunk = bytes(self.audio_buffer[:self.audio_chunk_size])
                self.audio_buffer = self.audio_buffer[self.audio_chunk_size:]
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PCM16 –≤ base64 –¥–ª—è OpenAI
                audio_b64 = audio_buffer_to_base64(chunk)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ OpenAI Realtime API
                await self.send_to_assistant({
                    "type": "input_audio_buffer.append",
                    "audio": audio_b64,
                    "event_id": f"voximplant_audio_{int(time.time() * 1000)}"
                })
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–º–º–∏—Ç —á–µ—Ä–µ–∑ –ø–∞—É–∑—É
            asyncio.create_task(self.auto_commit_audio())
            
        except Exception as e:
            logger.error(f"[VOXIMPLANT-v2.1] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: {e}")

    async def auto_commit_audio(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–º–º–∏—Ç–∏—Ç –∞—É–¥–∏–æ –±—É—Ñ–µ—Ä –ø–æ—Å–ª–µ –ø–∞—É–∑—ã"""
        await asyncio.sleep(0.6)
        
        if time.time() - self.last_audio_time >= 0.5:
            await self.send_to_assistant({
                "type": "input_audio_buffer.commit",
                "event_id": f"voximplant_commit_{int(time.time() * 1000)}"
            })

    async def handle_assistant_responses(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
        try:
            while self.is_connected and self.assistant_ws and not self.assistant_ws.is_closed:
                try:
                    message = await self.assistant_ws.receive()
                    
                    if "text" in message:
                        response = json.loads(message["text"])
                        await self.handle_assistant_response(response)
                    elif "bytes" in message:
                        await self.send_audio_to_voximplant(message["bytes"])
                        
                except asyncio.TimeoutError:
                    continue
                except Exception as e:
                    logger.error(f"[VOXIMPLANT-v2.1] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {e}")
                    break
                    
        except Exception as e:
            logger.error(f"[VOXIMPLANT-v2.1] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {e}")

    async def handle_assistant_response(self, response: dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
        msg_type = response.get("type", "")
        
        # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –≤ Voximplant
        if msg_type in [
            "error", 
            "function_call.start", 
            "function_call.completed",
            "session.interrupted",
            "conversation.interrupted"
        ]:
            await self.send_to_voximplant(response)
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —Å–æ–±—ã—Ç–∏–π
        elif msg_type == "response.audio.delta":
            delta_audio = response.get("delta", "")
            if delta_audio:
                try:
                    audio_bytes = base64_to_audio_buffer(delta_audio)
                    await self.send_audio_to_voximplant(audio_bytes)
                except Exception as e:
                    logger.error(f"[VOXIMPLANT-v2.1] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ: {e}")
        
        # üÜï v2.1: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        elif msg_type == "conversation.item.input_audio_transcription.completed":
            self.user_transcript = response.get("transcript", "")
            logger.info(f"[VOXIMPLANT-v2.1] üë§ User: {self.user_transcript}")
            
        elif msg_type == "response.audio_transcript.done":
            self.assistant_transcript = response.get("transcript", "")
            logger.info(f"[VOXIMPLANT-v2.1] ü§ñ Assistant: {self.assistant_transcript}")
        
        # üÜï v2.1: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏
        elif msg_type == "response.function_call_arguments.done":
            function_name = response.get("name", "")
            logger.info(f"[VOXIMPLANT-v2.1] üîß Function called: {function_name}")
        
        # üÜï v2.1: –ü—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ - –ª–æ–≥–∏—Ä—É–µ–º –≤ Google Sheets
        elif msg_type == "response.done":
            await self.log_conversation()
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ—á–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        elif msg_type == "assistant.speech.started":
            self.is_assistant_speaking = True
            await self.send_to_voximplant({
                "type": "assistant_speaking",
                "speaking": True,
                "timestamp": time.time()
            })
            
        elif msg_type == "assistant.speech.ended":
            self.is_assistant_speaking = False
            await self.send_to_voximplant({
                "type": "assistant_speaking", 
                "speaking": False,
                "timestamp": time.time()
            })
            
        elif msg_type in ["conversation.interrupted", "response.cancelled"]:
            self.is_assistant_speaking = False
            await self.send_to_voximplant({
                "type": "conversation.interrupted",
                "timestamp": time.time()
            })

    async def log_conversation(self):
        """üÜï v2.1: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –≤ Google Sheets"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ google_sheet_id
            assistant = self.db.query(AssistantConfig).filter(
                AssistantConfig.id == uuid.UUID(self.assistant_id)
            ).first()
            
            if not assistant:
                logger.warning(f"[VOXIMPLANT-v2.1] –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç {self.assistant_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
                return
            
            if not hasattr(assistant, 'google_sheet_id') or not assistant.google_sheet_id:
                logger.info(f"[VOXIMPLANT-v2.1] Google Sheet ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ {self.assistant_id}")
                return
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤ Google Sheets —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            await GoogleSheetsService.log_conversation(
                sheet_id=assistant.google_sheet_id,
                user_message=self.user_transcript,
                assistant_message=self.assistant_transcript,
                function_result=self.function_result,
                conversation_id=self.call_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º call_id –∫–∞–∫ conversation_id
                caller_number=self.caller_number  # üÜï –ü–µ—Ä–µ–¥–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            )
            
            logger.info(f"[VOXIMPLANT-v2.1] ‚úÖ –†–∞–∑–≥–æ–≤–æ—Ä –∑–∞–ø–∏—Å–∞–Ω –≤ Google Sheets —Å –Ω–æ–º–µ—Ä–æ–º: {self.caller_number}")
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            self.user_transcript = ""
            self.assistant_transcript = ""
            self.function_result = None
            
        except Exception as e:
            logger.error(f"[VOXIMPLANT-v2.1] –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Google Sheets: {e}")

    async def send_audio_to_voximplant(self, audio_bytes: bytes):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –≤ Voximplant –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        try:
            if self.is_connected and audio_bytes:
                await self.voximplant_ws.send_bytes(audio_bytes)
                
                # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                if hasattr(self, '_audio_log_counter'):
                    self._audio_log_counter += 1
                else:
                    self._audio_log_counter = 1
                    
                if self._audio_log_counter % 50 == 0:
                    logger.info(f"[VOXIMPLANT-v2.1] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞—É–¥–∏–æ –ø–∞–∫–µ—Ç–æ–≤: {self._audio_log_counter}, —Ä–∞–∑–º–µ—Ä: {len(audio_bytes)} –±–∞–π—Ç")
                    
        except Exception as e:
            logger.error(f"[VOXIMPLANT-v2.1] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ –≤ Voximplant: {e}")

    async def send_to_assistant(self, message: dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É"""
        if self.assistant_ws and not self.assistant_ws.is_closed:
            try:
                await self.assistant_ws.send_json(message)
            except Exception as e:
                logger.error(f"[VOXIMPLANT-v2.1] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É: {e}")

    async def send_to_voximplant(self, message: dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Voximplant"""
        if self.is_connected:
            try:
                await self.voximplant_ws.send_text(json.dumps(message))
            except Exception as e:
                logger.error(f"[VOXIMPLANT-v2.1] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Voximplant: {e}")

    async def cleanup(self):
        """–û—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã"""
        logger.info(f"[VOXIMPLANT-v2.1] –ù–∞—á–∞–ª–æ –æ—á–∏—Å—Ç–∫–∏ –∞–¥–∞–ø—Ç–µ—Ä–∞ –¥–ª—è client_id={self.client_id}")
        logger.info(f"[VOXIMPLANT-v2.1] üìû –ù–æ–º–µ—Ä –∑–≤–æ–Ω–∏–≤—à–µ–≥–æ: {self.caller_number}")
        
        self.is_connected = False
        self.is_assistant_speaking = False
        
        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        for task in self.background_tasks:
            if not task.done():
                task.cancel()
                try:
                    await task
                except asyncio.CancelledError:
                    pass
                except Exception as e:
                    logger.error(f"[VOXIMPLANT-v2.1] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–¥–∞—á–∏: {e}")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if self.assistant_ws and not self.assistant_ws.is_closed:
            await self.assistant_ws.close()
            
        if self.server_ws and not self.server_ws.is_closed:
            await self.server_ws.close()
            
        logger.info(f"[VOXIMPLANT-v2.1] –ê–¥–∞–ø—Ç–µ—Ä –æ—á–∏—â–µ–Ω –¥–ª—è client_id={self.client_id}")


async def handle_voximplant_websocket(websocket: WebSocket, assistant_id: str, db: Session):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –æ—Ç Voximplant v2.1
    """
    adapter = None
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        if assistant_id == "demo":
            assistant = db.query(AssistantConfig).filter(AssistantConfig.is_public.is_(True)).first()
            if not assistant:
                assistant = db.query(AssistantConfig).first()
            logger.info(f"[VOXIMPLANT-v2.1] –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ {assistant.id if assistant else 'None'} –¥–ª—è –¥–µ–º–æ")
        else:
            try:
                uuid_obj = uuid.UUID(assistant_id)
                assistant = db.query(AssistantConfig).get(uuid_obj)
            except ValueError:
                assistant = db.query(AssistantConfig).filter(AssistantConfig.id.cast(str) == assistant_id).first()

        if not assistant:
            logger.error(f"[VOXIMPLANT-v2.1] –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç {assistant_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await websocket.accept()
            await websocket.send_text(json.dumps({
                "type": "error",
                "error": {"code": "assistant_not_found", "message": "Assistant not found"}
            }))
            await websocket.close(code=1008)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if assistant.user_id and not assistant.is_public:
            try:
                db.refresh(assistant)
                user = db.query(User).get(assistant.user_id)
                if user and not user.is_admin and user.email != "well96well@gmail.com":
                    subscription_status = await UserService.check_subscription_status(db, str(user.id))
                    
                    if not subscription_status["active"]:
                        logger.warning(f"[VOXIMPLANT-v2.1] –î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} - –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞")
                        
                        await websocket.accept()
                        await websocket.send_text(json.dumps({
                            "type": "error",
                            "error": {
                                "code": "SUBSCRIPTION_EXPIRED",
                                "message": "–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –û–±–Ω–æ–≤–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.",
                                "subscription_status": subscription_status,
                                "requires_payment": True
                            }
                        }))
                        await websocket.close(code=1008)
                        return
            except Exception as db_error:
                logger.error(f"[VOXIMPLANT-v2.1] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {db_error}")

        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å–µ—Å—Å–∏–∏ –ë–î –¥–ª—è –∞–¥–∞–ø—Ç–µ—Ä–∞
        try:
            from backend.db.session import SessionLocal
            adapter_db = SessionLocal()
            
            # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä
            adapter = VoximplantAdapter(websocket, assistant_id, adapter_db)
            await adapter.start()
            
        finally:
            if 'adapter_db' in locals():
                adapter_db.close()
        
    except Exception as e:
        logger.error(f"[VOXIMPLANT-v2.1] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket: {e}")
        
        try:
            if not adapter:
                await websocket.accept()
            await websocket.send_text(json.dumps({
                "type": "error",
                "error": {
                    "code": "server_error",
                    "message": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
                }
            }))
        except:
            pass
        
        if adapter:
            await adapter.cleanup()
        else:
            try:
                await websocket.close()
            except:
                pass
