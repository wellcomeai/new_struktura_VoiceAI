# test_google_sheets.py
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Google Sheets –Ω–∞ Render
–ó–∞–ø—É—Å–∫: python test_google_sheets.py
"""

import os
import json
import sys
from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

print("=" * 60)
print("üîç GOOGLE SHEETS DIAGNOSTICS")
print("=" * 60)

# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
print("\n1Ô∏è‚É£ Checking GOOGLE_SERVICE_ACCOUNT_JSON...")
service_account_json = os.environ.get("GOOGLE_SERVICE_ACCOUNT_JSON")

if not service_account_json:
    print("‚ùå GOOGLE_SERVICE_ACCOUNT_JSON NOT FOUND")
    sys.exit(1)

print(f"‚úÖ Variable exists, length: {len(service_account_json)} chars")

# 2. –ü–∞—Ä—Å–∏–Ω–≥ JSON
print("\n2Ô∏è‚É£ Parsing JSON...")
try:
    service_account_info = json.loads(service_account_json)
    print("‚úÖ JSON valid")
except json.JSONDecodeError as e:
    print(f"‚ùå JSON INVALID: {e}")
    sys.exit(1)

# 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
print("\n3Ô∏è‚É£ Checking required fields...")
required_fields = ["type", "project_id", "private_key_id", "private_key", "client_email"]
missing = [f for f in required_fields if f not in service_account_info]

if missing:
    print(f"‚ùå Missing fields: {missing}")
    sys.exit(1)

print(f"‚úÖ All required fields present")
print(f"   Client email: {service_account_info['client_email']}")
print(f"   Project ID: {service_account_info['project_id']}")

# 4. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ private_key
print("\n4Ô∏è‚É£ Fixing private_key format...")
if "\\n" in service_account_info["private_key"]:
    service_account_info["private_key"] = service_account_info["private_key"].replace("\\n", "\n")
    print("‚úÖ Private key newlines fixed")
else:
    print("‚úÖ Private key format OK")

# 5. –°–æ–∑–¥–∞–Ω–∏–µ credentials
print("\n5Ô∏è‚É£ Creating credentials...")
try:
    credentials = service_account.Credentials.from_service_account_info(
        service_account_info,
        scopes=['https://www.googleapis.com/auth/spreadsheets']
    )
    print(f"‚úÖ Credentials created")
    print(f"   Service account: {credentials.service_account_email}")
except Exception as e:
    print(f"‚ùå Credentials creation failed: {e}")
    sys.exit(1)

# 6. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
print("\n6Ô∏è‚É£ Getting access token...")
try:
    import google.auth.transport.requests
    request = google.auth.transport.requests.Request()
    credentials.refresh(request)
    print("‚úÖ Token obtained successfully")
except Exception as e:
    print(f"‚ùå Token refresh failed: {e}")
    sys.exit(1)

# 7. –°–æ–∑–¥–∞–Ω–∏–µ Sheets API service
print("\n7Ô∏è‚É£ Building Sheets API service...")
try:
    service = build('sheets', 'v4', credentials=credentials, cache_discovery=False)
    print("‚úÖ Sheets API service created")
except Exception as e:
    print(f"‚ùå Service creation failed: {e}")
    sys.exit(1)

# 8. –¢–µ—Å—Ç –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
print("\n8Ô∏è‚É£ Testing with actual spreadsheet...")
print("Enter your Google Sheet ID (or press Enter to skip):")
sheet_id = input().strip()

if sheet_id:
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
        sheet = service.spreadsheets().get(
            spreadsheetId=sheet_id,
            fields='properties.title'
        ).execute()
        
        title = sheet.get('properties', {}).get('title', 'Untitled')
        print(f"‚úÖ Sheet found: {title}")
        
        # –ü—Ä–æ–±—É–µ–º –∑–∞–ø–∏—Å–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        print("   Testing write access...")
        test_values = [["TEST - Diagnostic check"]]
        
        result = service.spreadsheets().values().append(
            spreadsheetId=sheet_id,
            range='Z:Z',
            valueInputOption='RAW',
            insertDataOption='INSERT_ROWS',
            body={'values': test_values}
        ).execute()
        
        print(f"‚úÖ Write successful!")
        print(f"   Updated: {result.get('updates', {}).get('updatedRange')}")
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
        update_range = result.get('updates', {}).get('updatedRange', 'Z1')
        service.spreadsheets().values().clear(
            spreadsheetId=sheet_id,
            range=update_range,
            body={}
        ).execute()
        print("‚úÖ Test data cleaned up")
        
    except HttpError as e:
        print(f"‚ùå HTTP Error: {e}")
        if e.resp.status == 403:
            print("   ‚Üí Sheet not shared with service account")
            print(f"   ‚Üí Share with: {service_account_info['client_email']}")
        elif e.resp.status == 404:
            print("   ‚Üí Sheet ID not found")
    except Exception as e:
        print(f"‚ùå Error: {e}")
else:
    print("‚è≠Ô∏è  Skipped sheet test")

print("\n" + "=" * 60)
print("‚úÖ DIAGNOSTICS COMPLETE")
print("=" * 60)
